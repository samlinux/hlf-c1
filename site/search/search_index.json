{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Hyperledger Fabric Learning Path This is my approach to study Hyperledger Fabric (HLF). I will cover two perspectives: The point of view on an application developer who is going to develop an application based on an existing HLF Network. The point of view on an administrator who wants to operate, plan and set up an HLF Network.","title":"Home"},{"location":"#hyperledger-fabric-learning-path","text":"This is my approach to study Hyperledger Fabric (HLF). I will cover two perspectives: The point of view on an application developer who is going to develop an application based on an existing HLF Network. The point of view on an administrator who wants to operate, plan and set up an HLF Network.","title":"Hyperledger Fabric Learning Path"},{"location":"about/release-notes/","text":"Release Notes This guide is developed by Bole Roland @samlinux.","title":"Release Notes"},{"location":"about/release-notes/#release-notes","text":"This guide is developed by Bole Roland @samlinux.","title":"Release Notes"},{"location":"administrator/","text":"Administrator Learning Path Set up the basic installation Set up the morgen.net network Useful fabric-ca commands","title":"Administrator Learning Path"},{"location":"administrator/#administrator-learning-path","text":"Set up the basic installation Set up the morgen.net network Useful fabric-ca commands","title":"Administrator Learning Path"},{"location":"administrator/fabricCa/","text":"Useful fabric-ca commands To use a command against the fabric-ca we have to set up some TLS environment variables. export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem Shows a list of all available identities. fabric-ca-client identity list Shows a specific identity. fabric-ca-client identity list --id ca-mars.morgen.net-admin Check if an identity is registered or enrolled To check if an identity is registerd, you can use the following command. If the command shows the identity, then it is registered. fabric-ca-client identity list --id user1-mars.morgen.net # shows something like this Name: user1-mars.morgen.net, Type: client, Affiliation: , Max Enrollments: -1, Attributes: [{Name:hf.EnrollmentID Value:user1-mars.morgen.net ECert:true} {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value: ECert:true}] If the identity is only registered and not enrolled. You will receive no result like it is displayed in the example below. fabric-ca-client certificate list --id user1-mars.morgen.net # shows something like this No results returned Check the validity of a enrolled identity openssl x509 -in admin/msp/cacerts/ca-mars-morgen-net-7054.pem -text # should show something like that Certificate: Data: Version: 3 (0x2) Serial Number: 58:34:5d:77:8c:10:18:e5:cd:e2:93:25:48:e0:25:3b:07:a4:a4:21 Signature Algorithm: ecdsa-with-SHA256 Issuer: C = US, ST = North Carolina, O = Hyperledger, OU = Fabric, CN = ca-mars.morgen.net Validity Not Before: Jun 4 14:19:00 2020 GMT Not After : Jun 1 14:19:00 2035 GMT Subject: C = US, ST = North Carolina, O = Hyperledger, OU = Fabric, CN = ca-mars.morgen.net","title":"Useful fabric-ca commands"},{"location":"administrator/fabricCa/#useful-fabric-ca-commands","text":"To use a command against the fabric-ca we have to set up some TLS environment variables. export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem Shows a list of all available identities. fabric-ca-client identity list Shows a specific identity. fabric-ca-client identity list --id ca-mars.morgen.net-admin","title":"Useful fabric-ca commands"},{"location":"administrator/fabricCa/#check-if-an-identity-is-registered-or-enrolled","text":"To check if an identity is registerd, you can use the following command. If the command shows the identity, then it is registered. fabric-ca-client identity list --id user1-mars.morgen.net # shows something like this Name: user1-mars.morgen.net, Type: client, Affiliation: , Max Enrollments: -1, Attributes: [{Name:hf.EnrollmentID Value:user1-mars.morgen.net ECert:true} {Name:hf.Type Value:client ECert:true} {Name:hf.Affiliation Value: ECert:true}] If the identity is only registered and not enrolled. You will receive no result like it is displayed in the example below. fabric-ca-client certificate list --id user1-mars.morgen.net # shows something like this No results returned","title":"Check if an identity is registered or enrolled"},{"location":"administrator/fabricCa/#check-the-validity-of-a-enrolled-identity","text":"openssl x509 -in admin/msp/cacerts/ca-mars-morgen-net-7054.pem -text # should show something like that Certificate: Data: Version: 3 (0x2) Serial Number: 58:34:5d:77:8c:10:18:e5:cd:e2:93:25:48:e0:25:3b:07:a4:a4:21 Signature Algorithm: ecdsa-with-SHA256 Issuer: C = US, ST = North Carolina, O = Hyperledger, OU = Fabric, CN = ca-mars.morgen.net Validity Not Before: Jun 4 14:19:00 2020 GMT Not After : Jun 1 14:19:00 2035 GMT Subject: C = US, ST = North Carolina, O = Hyperledger, OU = Fabric, CN = ca-mars.morgen.net","title":"Check the validity of a enrolled identity"},{"location":"administrator/morgen.net/","text":"The morgen.net network In this scenario we are going to setup a fabric network from scratch. You can find the network topology in the diagram above. Starting from a single organization we need two more organizations. One for the Ordering-Service and another for the TLS-Service. To create the crypto artifacts we use fabric-ca. So every organization starts with his own certificate authority (CA). A central TLS Service is established to provide the TLS certificates for the whole network members. Network configuration In order to be able to address the network members correctly by it`s name and to avoid some common TLS problems we can make some dns entries in the servers hosts file. # edit local hosts file vi /etc/hosts # add the following domains 127.0.0.1 ca-tls.morgen.net 127.0.0.1 ca-orderer.morgen.net 127.0.0.1 ca-mars.morgen.net 127.0.0.1 peer0.mars.morgen.net 127.0.0.1 peer1.mars.morgen.net 127.0.0.1 orderer.morgen.net Create the root folder First, we start with a short project setup. Based on our fabric installation set up, we switch to the fabric folder as our starting point. # we create the base folder cd /$USER/fabric/ mkdir morgen.net cd morgen.net Create the project structure Derived from our network topology we create the following directory structure. mkdir ca-tls.morgen.at mkdir ca-orderer.morgen.at mkdir ca-mars.morgen.at As you can see we create a root folder for every organization. You can check the structure. tree . . \u251c\u2500\u2500 ca-mars.morgen.at \u251c\u2500\u2500 ca-orderer.morgen.at \u2514\u2500\u2500 ca-tls.morgen.at We need a node.js client application as well to interact with the network. For this we create a folder called app. We will come back later to this folder. mkdir app In this scenario we need a simple chaincode. For this we can use the sacc ''** chaincode from the fabric-samples. mkdir chaincode cp -r ../fabric-samples/chaincode/sacc/ ./ The final folder structure should look like this. tree . . \u251c\u2500\u2500 app \u251c\u2500\u2500 ca-mars.morgen.net \u251c\u2500\u2500 ca-orderer.morgen.net \u251c\u2500\u2500 ca-tls.morgen.net \u251c\u2500\u2500 chaincode \u2514\u2500\u2500 sacc \u2514\u2500\u2500 sacc.go Now we are ready to set up each organization step by step. We will do that in the following order. ca-tls.morgen.net ca-orderer.morgen.net ca-mars.morgen.net start the network How to reset the network Instructions to clear the network","title":"The morgen.net network"},{"location":"administrator/morgen.net/#the-morgennet-network","text":"In this scenario we are going to setup a fabric network from scratch. You can find the network topology in the diagram above. Starting from a single organization we need two more organizations. One for the Ordering-Service and another for the TLS-Service. To create the crypto artifacts we use fabric-ca. So every organization starts with his own certificate authority (CA). A central TLS Service is established to provide the TLS certificates for the whole network members.","title":"The morgen.net network"},{"location":"administrator/morgen.net/#network-configuration","text":"In order to be able to address the network members correctly by it`s name and to avoid some common TLS problems we can make some dns entries in the servers hosts file. # edit local hosts file vi /etc/hosts # add the following domains 127.0.0.1 ca-tls.morgen.net 127.0.0.1 ca-orderer.morgen.net 127.0.0.1 ca-mars.morgen.net 127.0.0.1 peer0.mars.morgen.net 127.0.0.1 peer1.mars.morgen.net 127.0.0.1 orderer.morgen.net","title":"Network configuration"},{"location":"administrator/morgen.net/#create-the-root-folder","text":"First, we start with a short project setup. Based on our fabric installation set up, we switch to the fabric folder as our starting point. # we create the base folder cd /$USER/fabric/ mkdir morgen.net cd morgen.net","title":"Create the root folder"},{"location":"administrator/morgen.net/#create-the-project-structure","text":"Derived from our network topology we create the following directory structure. mkdir ca-tls.morgen.at mkdir ca-orderer.morgen.at mkdir ca-mars.morgen.at As you can see we create a root folder for every organization. You can check the structure. tree . . \u251c\u2500\u2500 ca-mars.morgen.at \u251c\u2500\u2500 ca-orderer.morgen.at \u2514\u2500\u2500 ca-tls.morgen.at We need a node.js client application as well to interact with the network. For this we create a folder called app. We will come back later to this folder. mkdir app In this scenario we need a simple chaincode. For this we can use the sacc ''** chaincode from the fabric-samples. mkdir chaincode cp -r ../fabric-samples/chaincode/sacc/ ./ The final folder structure should look like this. tree . . \u251c\u2500\u2500 app \u251c\u2500\u2500 ca-mars.morgen.net \u251c\u2500\u2500 ca-orderer.morgen.net \u251c\u2500\u2500 ca-tls.morgen.net \u251c\u2500\u2500 chaincode \u2514\u2500\u2500 sacc \u2514\u2500\u2500 sacc.go Now we are ready to set up each organization step by step. We will do that in the following order. ca-tls.morgen.net ca-orderer.morgen.net ca-mars.morgen.net start the network","title":"Create the project structure"},{"location":"administrator/morgen.net/#how-to-reset-the-network","text":"Instructions to clear the network","title":"How to reset the network"},{"location":"administrator/morgen.net/clearSetup/","text":"Clear the network Switch to the base folder. cd morgen.net Stop running CAs docker-compose -f ca-tls.morgen.net/docker-compose.yaml down docker-compose -f ca-orderer.morgen.net/docker-compose.yaml down docker-compose -f ca-mars.morgen.net/docker-compose.yaml down Remove chaincode container docker rm -f $(docker ps -a | awk '($2 ~ /dev-peer.*/) {print $1} ') docker rm $(docker ps -a -f status=exited -q) Remove production data We can clear the network data, but not the artifacts. This is useful if you want to practies the process of chaincode installation. # remove genesis block and channel config sudo rm -r ./ca-orderer.morgen.net/orderer/genesis.block sudo rm -r ./ca-mars.morgen.net/peers/peer0/assets/channel.tx sudo rm ./ca-mars.morgen.net/peers/peer1/assets/channel1.block # remove persistent data if you use it sudo rm -R ./ca-mars.morgen.net/peers/peer0/production sudo rm -R ./ca-mars.morgen.net/peers/peer1/production sudo rm -R ./ca-orderer.morgen.net/orderer/production Clear crypto material To start from the ground you can clear all artifacts, production data and chaincode containers. # clear tls-ca.morgen.net sudo rm -R ca-tls.morgen.net/ca # clear ca-orderer.morgen.net sudo rm -R ca-orderer.morgen.net/admin sudo rm -R ca-orderer.morgen.net/ca sudo rm -R ca-orderer.morgen.net/orderer sudo rm -R ca-orderer.morgen.net/msp # clear ca-mars.morgen.net sudo rm -R ca-mars.morgen.net/admin sudo rm -R ca-mars.morgen.net/ca sudo rm -R ca-mars.morgen.net/msp sudo rm -R ca-mars.morgen.net/peers sudo rm -R ca-mars.morgen.net/users","title":"Clear the network"},{"location":"administrator/morgen.net/clearSetup/#clear-the-network","text":"Switch to the base folder. cd morgen.net","title":"Clear the network"},{"location":"administrator/morgen.net/clearSetup/#stop-running-cas","text":"docker-compose -f ca-tls.morgen.net/docker-compose.yaml down docker-compose -f ca-orderer.morgen.net/docker-compose.yaml down docker-compose -f ca-mars.morgen.net/docker-compose.yaml down","title":"Stop running CAs"},{"location":"administrator/morgen.net/clearSetup/#remove-chaincode-container","text":"docker rm -f $(docker ps -a | awk '($2 ~ /dev-peer.*/) {print $1} ') docker rm $(docker ps -a -f status=exited -q)","title":"Remove chaincode container"},{"location":"administrator/morgen.net/clearSetup/#remove-production-data","text":"We can clear the network data, but not the artifacts. This is useful if you want to practies the process of chaincode installation. # remove genesis block and channel config sudo rm -r ./ca-orderer.morgen.net/orderer/genesis.block sudo rm -r ./ca-mars.morgen.net/peers/peer0/assets/channel.tx sudo rm ./ca-mars.morgen.net/peers/peer1/assets/channel1.block # remove persistent data if you use it sudo rm -R ./ca-mars.morgen.net/peers/peer0/production sudo rm -R ./ca-mars.morgen.net/peers/peer1/production sudo rm -R ./ca-orderer.morgen.net/orderer/production","title":"Remove production data"},{"location":"administrator/morgen.net/clearSetup/#clear-crypto-material","text":"To start from the ground you can clear all artifacts, production data and chaincode containers. # clear tls-ca.morgen.net sudo rm -R ca-tls.morgen.net/ca # clear ca-orderer.morgen.net sudo rm -R ca-orderer.morgen.net/admin sudo rm -R ca-orderer.morgen.net/ca sudo rm -R ca-orderer.morgen.net/orderer sudo rm -R ca-orderer.morgen.net/msp # clear ca-mars.morgen.net sudo rm -R ca-mars.morgen.net/admin sudo rm -R ca-mars.morgen.net/ca sudo rm -R ca-mars.morgen.net/msp sudo rm -R ca-mars.morgen.net/peers sudo rm -R ca-mars.morgen.net/users","title":"Clear crypto material"},{"location":"administrator/morgen.net/index2/","text":"Put all things together Make sure you have done all steps in: ca-tls.morgen.net/index.md ca-orderer.morgen.net/index.md ca-mars.morgen.net/index.md After we have created the crypto materials we can bootstrap the fabric network. This process can be summarized in the following steps: Create the network docker-compose.file Create the genesis block Create the channel config Start the network Create the channel and join all peers Install and instantiate the chaincode Test the network with some queries (1) Create docker-compose.file First we have to setup our docker-compose file. You can find the details in docker-compose.yaml file in this directory. Overall we have six services in this composer file. We can group these services by type. Orderer service (1) orderer.morgen.net Peers (2) peer0.mars.morgen.net peer1.mars.morgen.net State Database (1 db per each peer) couchdb0 couchdb1 Cli (1) cli-mars.morgen.net To keep our couchDb database credentials secure we use the docker-compose .env file. # create the file vi .env # add the password in the format: var=value couchdbUser=root couchdbPwd=toor (2) Create the genesis block configtxgen -profile OneOrgOrdererGenesis -channelID orderersyschannel -outputBlock ./ca-orderer.morgen.net/orderer/genesis.block (3) Create the channel config configtxgen -profile OneOrgChannel -outputCreateChannelTx ./ca-mars.morgen.net/peers/peer0/assets/channel.tx -channelID channel1 (4) Start the network We start the network in the background. # start the network docker-compose -f docker-compose-couch.yaml up -d # watch logs docker-compose logs -f Open a further terminals and check if the network is running. # check if the network is running docker-compose ps # you should see Name Command State Ports ------------------------------------------------------------------------ cli-mars.morgen.net sh Up orderer.morgen.net orderer Up 0.0.0.0:7050->7050/tcp peer0.mars.morgen.net peer node start Up 0.0.0.0:7051->7051/tcp peer1.mars.morgen.net peer node start Up 0.0.0.0:8051->7051/tcp # check all running containers docker ps --format 'table {{.Names}}\\t {{.Ports}}' # you should see NAMES PORTS peer1.mars.morgen.net 0.0.0.0:8051->7051/tcp peer0.mars.morgen.net 0.0.0.0:7051->7051/tcp cli-mars.morgen.net couchdb1 4369/tcp, 9100/tcp, 0.0.0.0:6984->5984/tcp orderer.morgen.net 0.0.0.0:7050->7050/tcp couchdb0 4369/tcp, 9100/tcp, 0.0.0.0:5984->5984/tcp ca-mars.morgen.net 0.0.0.0:7054->7054/tcp ca-orderer.morgen.net 0.0.0.0:7053->7053/tcp, 7054/tcp ca-tls.morgen.net 0.0.0.0:7052->7052/tcp, 7054/tcp (5) Create the channel and join all peers To create the channel and join it to the peers we can use the cli container (cli-mars.morgen.net). # switch into this container docker exec -it cli-mars.morgen.net bash To interact with the network we make sure that some environment variables are set correctly. For peer0 all environment variables are already set in the docker-compose file. # needed environment variables export CORE_PEER_LOCALMSPID=\"marsMSP\" export CORE_PEER_MSPCONFIGPATH=\"/tmp/hyperledger/mars.morgen.net/admin/msp\" # these variables depends on the peer export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" We can check the existing environment variables in the cli container. printenv |grep CORE # you should see CORE_PEER_LOCALMSPID=marsMSP CORE_PEER_TLS_ENABLED=true CORE_PEER_ID=cli-mars.morgen.net CORE_PEER_MSPCONFIGPATH=/tmp/hyperledger/mars.morgen.net/admin/msp CORE_PEER_TLS_ROOTCERT_FILE=/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem CORE_PEER_ADDRESS=peer0.mars.morgen.net:7051 As a next step we can create the channel on peer0. peer channel create -c channel1 -f /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel.tx -o orderer.morgen.net:7050 --outputBlock /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel1.block --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem After this step we can join peer0 to the new channel. peer channel join -b /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel1.block We can check if channel1 is successfully joind to peer0. peer channel list # you should see Channels peers has joined: channel1 After this step we can switch over to peer1. For that we have to change the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer1.mars.morgen.net:7051\" Check if you are on peer1. printenv | grep CORE_PEER_ADDRESS On peer1 we have to fetch the newest channel information from the orderer. We can do that with the following command. peer channel fetch newest /tmp/hyperledger/mars.morgen.net/peers/peer1/assets/channel1.block -c channel1 --orderer orderer.morgen.net:7050 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem The next step is to join peer1 to channel1. peer channel join -b /tmp/hyperledger/mars.morgen.net/peers/peer1/assets/channel1.block Check if channel1 is successfully joind to peer1. peer channel list # you should see Channels peers has joined: channel1 (6) Install and instantiate the chaincode To install the chaincode we switch back to peer0. For that we set the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" Check if you are on peer0 again. printenv | grep CORE_PEER_ADDRESS Basically the process of installing a chaincode is divided in the following steps: install the chaincode check if chaincode is installed instantiate the chaincode use the chaincode with invoke or query operations To do this steps we can use the cli container. The cli container has mounted our chaincode folder (see the network docker-compose.yaml file). Becaue of this, we can call the following command to install the chaincode on the channel. peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed # you should see Get installed chaincodes on peer: Name: sacc, Version: 1.0, Path: github.com/hyperledger/fabric-samples/chaincode/sacc/, Id: c05aa7ef2... Based on the chaincode you have to instantiate the chaincode. In our example we use the sacc chaincode from the fabric-samples. peer chaincode instantiate -n sacc -v 1.0 -o orderer.morgen.net:7050 -C channel1 -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem Note: during this process a new container is created, the chaincode container dev-peer0.mars.morgen.net-sacc-1.0-82a3... We can no test the chaincode with a simple query. peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem # you should see hello blockchain To set a new value to the key we can use the invoke command. peer chaincode invoke -n sacc -c '{\"Args\":[\"set\", \"msg\",\"hello morgen.net\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem Now we are ready on peer0. Let's switch to peer1 to sync that peer. For that we switch to peer1 again by chaning the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer1.mars.morgen.net:7051\" Check again if you are on peer1 again. printenv | grep CORE_PEER_ADDRESS On peer1 no chaincode is installed, so we have to install the chaincode first to query the ledger from peer1. We do that with the following command. peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed # you should see Get installed chaincodes on peer: Name: sacc, Version: 1.0, Path: github.com/hyperledger/fabric-samples/chaincode/sacc/, Id: c05aa... Now you can query the leder from peer1. peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem To set a new value to the key we can use the invoke command. peer chaincode invoke -n sacc -c '{\"Args\":[\"set\", \"msg\",\"hello morgen.net\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem At this point you can switch back to peer0 and query the ledger to see if the peer0 is in sync with the ledger. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem # you should see hello morgen.net","title":"Put all things together"},{"location":"administrator/morgen.net/index2/#put-all-things-together","text":"Make sure you have done all steps in: ca-tls.morgen.net/index.md ca-orderer.morgen.net/index.md ca-mars.morgen.net/index.md After we have created the crypto materials we can bootstrap the fabric network. This process can be summarized in the following steps: Create the network docker-compose.file Create the genesis block Create the channel config Start the network Create the channel and join all peers Install and instantiate the chaincode Test the network with some queries","title":"Put all things together"},{"location":"administrator/morgen.net/index2/#1-create-docker-composefile","text":"First we have to setup our docker-compose file. You can find the details in docker-compose.yaml file in this directory. Overall we have six services in this composer file. We can group these services by type.","title":"(1) Create docker-compose.file"},{"location":"administrator/morgen.net/index2/#orderer-service-1","text":"orderer.morgen.net","title":"Orderer service (1)"},{"location":"administrator/morgen.net/index2/#peers-2","text":"peer0.mars.morgen.net peer1.mars.morgen.net","title":"Peers (2)"},{"location":"administrator/morgen.net/index2/#state-database-1-db-per-each-peer","text":"couchdb0 couchdb1","title":"State Database (1 db per each peer)"},{"location":"administrator/morgen.net/index2/#cli-1","text":"cli-mars.morgen.net To keep our couchDb database credentials secure we use the docker-compose .env file. # create the file vi .env # add the password in the format: var=value couchdbUser=root couchdbPwd=toor","title":"Cli (1)"},{"location":"administrator/morgen.net/index2/#2-create-the-genesis-block","text":"configtxgen -profile OneOrgOrdererGenesis -channelID orderersyschannel -outputBlock ./ca-orderer.morgen.net/orderer/genesis.block","title":"(2) Create the genesis block"},{"location":"administrator/morgen.net/index2/#3-create-the-channel-config","text":"configtxgen -profile OneOrgChannel -outputCreateChannelTx ./ca-mars.morgen.net/peers/peer0/assets/channel.tx -channelID channel1","title":"(3) Create the channel config"},{"location":"administrator/morgen.net/index2/#4-start-the-network","text":"We start the network in the background. # start the network docker-compose -f docker-compose-couch.yaml up -d # watch logs docker-compose logs -f Open a further terminals and check if the network is running. # check if the network is running docker-compose ps # you should see Name Command State Ports ------------------------------------------------------------------------ cli-mars.morgen.net sh Up orderer.morgen.net orderer Up 0.0.0.0:7050->7050/tcp peer0.mars.morgen.net peer node start Up 0.0.0.0:7051->7051/tcp peer1.mars.morgen.net peer node start Up 0.0.0.0:8051->7051/tcp # check all running containers docker ps --format 'table {{.Names}}\\t {{.Ports}}' # you should see NAMES PORTS peer1.mars.morgen.net 0.0.0.0:8051->7051/tcp peer0.mars.morgen.net 0.0.0.0:7051->7051/tcp cli-mars.morgen.net couchdb1 4369/tcp, 9100/tcp, 0.0.0.0:6984->5984/tcp orderer.morgen.net 0.0.0.0:7050->7050/tcp couchdb0 4369/tcp, 9100/tcp, 0.0.0.0:5984->5984/tcp ca-mars.morgen.net 0.0.0.0:7054->7054/tcp ca-orderer.morgen.net 0.0.0.0:7053->7053/tcp, 7054/tcp ca-tls.morgen.net 0.0.0.0:7052->7052/tcp, 7054/tcp","title":"(4) Start the network"},{"location":"administrator/morgen.net/index2/#5-create-the-channel-and-join-all-peers","text":"To create the channel and join it to the peers we can use the cli container (cli-mars.morgen.net). # switch into this container docker exec -it cli-mars.morgen.net bash To interact with the network we make sure that some environment variables are set correctly. For peer0 all environment variables are already set in the docker-compose file. # needed environment variables export CORE_PEER_LOCALMSPID=\"marsMSP\" export CORE_PEER_MSPCONFIGPATH=\"/tmp/hyperledger/mars.morgen.net/admin/msp\" # these variables depends on the peer export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" We can check the existing environment variables in the cli container. printenv |grep CORE # you should see CORE_PEER_LOCALMSPID=marsMSP CORE_PEER_TLS_ENABLED=true CORE_PEER_ID=cli-mars.morgen.net CORE_PEER_MSPCONFIGPATH=/tmp/hyperledger/mars.morgen.net/admin/msp CORE_PEER_TLS_ROOTCERT_FILE=/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem CORE_PEER_ADDRESS=peer0.mars.morgen.net:7051 As a next step we can create the channel on peer0. peer channel create -c channel1 -f /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel.tx -o orderer.morgen.net:7050 --outputBlock /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel1.block --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem After this step we can join peer0 to the new channel. peer channel join -b /tmp/hyperledger/mars.morgen.net/peers/peer0/assets/channel1.block We can check if channel1 is successfully joind to peer0. peer channel list # you should see Channels peers has joined: channel1 After this step we can switch over to peer1. For that we have to change the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer1.mars.morgen.net:7051\" Check if you are on peer1. printenv | grep CORE_PEER_ADDRESS On peer1 we have to fetch the newest channel information from the orderer. We can do that with the following command. peer channel fetch newest /tmp/hyperledger/mars.morgen.net/peers/peer1/assets/channel1.block -c channel1 --orderer orderer.morgen.net:7050 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem The next step is to join peer1 to channel1. peer channel join -b /tmp/hyperledger/mars.morgen.net/peers/peer1/assets/channel1.block Check if channel1 is successfully joind to peer1. peer channel list # you should see Channels peers has joined: channel1","title":"(5) Create the channel and join all peers"},{"location":"administrator/morgen.net/index2/#6-install-and-instantiate-the-chaincode","text":"To install the chaincode we switch back to peer0. For that we set the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" Check if you are on peer0 again. printenv | grep CORE_PEER_ADDRESS Basically the process of installing a chaincode is divided in the following steps: install the chaincode check if chaincode is installed instantiate the chaincode use the chaincode with invoke or query operations To do this steps we can use the cli container. The cli container has mounted our chaincode folder (see the network docker-compose.yaml file). Becaue of this, we can call the following command to install the chaincode on the channel. peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed # you should see Get installed chaincodes on peer: Name: sacc, Version: 1.0, Path: github.com/hyperledger/fabric-samples/chaincode/sacc/, Id: c05aa7ef2... Based on the chaincode you have to instantiate the chaincode. In our example we use the sacc chaincode from the fabric-samples. peer chaincode instantiate -n sacc -v 1.0 -o orderer.morgen.net:7050 -C channel1 -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem Note: during this process a new container is created, the chaincode container dev-peer0.mars.morgen.net-sacc-1.0-82a3... We can no test the chaincode with a simple query. peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem # you should see hello blockchain To set a new value to the key we can use the invoke command. peer chaincode invoke -n sacc -c '{\"Args\":[\"set\", \"msg\",\"hello morgen.net\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem Now we are ready on peer0. Let's switch to peer1 to sync that peer. For that we switch to peer1 again by chaning the corresponding environment variables. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer1.mars.morgen.net:7051\" Check again if you are on peer1 again. printenv | grep CORE_PEER_ADDRESS On peer1 no chaincode is installed, so we have to install the chaincode first to query the ledger from peer1. We do that with the following command. peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed # you should see Get installed chaincodes on peer: Name: sacc, Version: 1.0, Path: github.com/hyperledger/fabric-samples/chaincode/sacc/, Id: c05aa... Now you can query the leder from peer1. peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem To set a new value to the key we can use the invoke command. peer chaincode invoke -n sacc -c '{\"Args\":[\"set\", \"msg\",\"hello morgen.net\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer1/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem At this point you can switch back to peer0 and query the ledger to see if the peer0 is in sync with the ledger. export CORE_PEER_TLS_ROOTCERT_FILE=\"/tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem\" export CORE_PEER_ADDRESS=\"peer0.mars.morgen.net:7051\" peer chaincode query -n sacc -c '{\"Args\":[\"query\",\"msg\"]}' -C channel1 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem # you should see hello morgen.net","title":"(6) Install and instantiate the chaincode"},{"location":"administrator/morgen.net/ca-mars.morgen.net/","text":"Set up ca-mars.morgen.net The ca-mars.morgen.net organization is our main organization in this example. This organization runs the blockchain for hin own need. As we have seen the set up process for the CA is the same as we have done it already for the ca-orderer.morgen.net. basic preparation (including TLS certificate for the CA bootstrap identity, docker-compose set up and CA set up process) the creation of the CA admin the enrollment of the organisation members (1) Basic preparation (1.1) Create the base folders Frist we switch into the organisation folder and create the base folders, where our CA is living. cd ca-mars.morgen.net mkdir -p ca/server mkdir -p ca/client/{admin,tls-admin} As a next step we are going the enroll the TLS certificate for the CAs bootstrap admin identity. This identity we have already registered in the set up process from the ca-tls.morgen.net organisation. For this we have to copy the main TLS-CA cert to the both admin directories. # copy ca-tls cert for bootstrap ca identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/tls-admin # copy ca-tls cert for admin ca admin identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/admin Now we can enroll the TLS identity for the organizations admin. # set the needed environment vars export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem # enroll the admin fabric-ca-client enroll -d -u https://ca-mars.morgen.net-admin:ca-mars-adminpw@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'ca-mars.morgen.net' # rename admins private key for later CA configuration mv ca/client/tls-admin/tls-msp/keystore/*_sk ca/client/tls-admin/tls-msp/keystore/key.pem (1.2) Create docker-compose file We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-mars.morgen.net: container_name: ca-mars.morgen.net image: hyperledger/fabric-ca:1.4.6 command: /bin/bash -c 'fabric-ca-server init -b ca-mars.morgen.net-admin:${CaMarsAdminPw} --port 7054' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_TLS_ENABLED=true - FABRIC_CA_SERVER_CSR_CN=ca-mars.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-mars.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca - ./ca/client:/tmp/hyperledger/fabric-ca-client networks: - morgen ports: - 7054:7054 (1.3) Initialise the CA docker-compose up The set up process is the same as for ca-tls.morgen.net. The only thing we have to do is modify the fabric-ca-server-config.yaml and set the ca.name to ca-mars.morgen.net. Then you can modify the docker-compose.yaml file and replace the init command with start . # modify fabric-ca-server config vi ca/server/crypto/fabric-ca-server-config.yaml # change - modify docker-compose.yaml file #tls: ## Enable TLS (default: false) # enabled: true ## TLS for the server's listening port # certfile: /tmp/hyperledger/fabric-ca-client/tls-admin/tls-msp/signcerts/cert.pem # keyfile: /tmp/hyperledger/fabric-ca-client/tls-admin/tls-msp/keystore/key.pem #ca: # Name of this CA # name: ca-mars.morgen.net # -------------------------------- # modify docker-compose.yaml file # -------------------------------- vi docker-compose.yaml # change the command parameter command: sh -c 'fabric-ca-server start -b ca-orderer.morgen.net-admin:${CaMarsAdminPw} --port 7053' (1.4) Start the CA After following the previous steps, we can start the orderer organisation CA. # start the CA in the background docker-compose up -d # check it the CA is running docker-compose ps # check the logs docker-compose logs (1.5) Enroll the ca-mars.morgen.net-admin - preparation First we have to set two enviroments variables. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem (1.6) Enroll the ca-orderer.morgen-net-admin - enrollement After the environment variables are set we can enroll the ca-admin user for this particular organisation. fabric-ca-client enroll -d -u https://ca-mars.morgen.net-admin:ca-mars-adminpw@ca-mars.morgen.net:7054 --csr.hosts 'ca-mars.morgen.net' With these steps we have finally finished the set up process of the ca-orderer.morgen.net CA. Now the admin of this CA can start to interact with this CA to register members for this organization. (1.7) Register the members of the network As a next step we register the organization members for a later usage. In this organization we are going to use following organization members: two peer nodes and one admin user for this organization one client user for the node.js application The steps to enroll an identity are basically always the same: We register an identity with the corresponding CA. We enroll this identity. If needed, we enroll the TLS identity with the corresponding TLS-CA. Note in our case we have already registered the orderer node TLS identity in previous steps. Let's go and register the members. # peer0 fabric-ca-client register -d --id.name peer0.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-mars.morgen.net:7054 --csr.hosts 'peer0.mars.morgen.net' # peer1 fabric-ca-client register -d --id.name peer1.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-mars.morgen.net:7054 --csr.hosts 'peer1.mars.morgen.net' # an organization admin fabric-ca-client register -d --id.name admin-mars.morgen.net --id.secret marsAdminPW --id.type admin -u https://ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' # an organization client user fabric-ca-client register -d --id.name user1-mars.morgen.net --id.secret marsUserPW --id.type client -u https://ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' (2) Creation of the mars organization admin Now we can set up the admin user for the mars organization nodes. The admin user is required to administrate the peer nodes of this organization. (2.1) Create base folder We create an base folder for the orderer admin user. mkdir -p admin/ca (2.2) Copy ca-cert file For TLS communication we copy the ca-tls.morgen.net.cert.pem file to the admin folder. cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem admin/ca (2.3) Enroll the admin To enroll the orderer admin we have to do two steps we need to set some environment variables we enroll the admin (2.3.1) Set environment variables # set needed environment vars export FABRIC_CA_CLIENT_HOME=./admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca/ca-tls.morgen.net.cert.pem export FABRIC_CA_CLIENT_MSPDIR=msp (2.3.2) Enrollment of the admin Enroll the orderer admin user. fabric-ca-client enroll -d -u https://admin-mars.morgen.net:marsAdminPW@ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' (3) Set up the peers (3.1) Enroll peer peer0.mars.morgen.net (3.1.1) Preparation We create the following folderstructur for the peer. This folder is used later at runtime and will mountend into the each peer container. mkdir -p peers/peer0/assets/{ca,tls-ca} (3.1.2) Copy needed CA certs # copy orgs root certificate to the peer cp ./ca/server/crypto/ca-cert.pem ./peers/peer0/assets/ca/mars.morgen.net-ca-cert.pem # copying TLS-CA root certificate to the peer for tls authentication cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer0/assets/tls-ca/ (3.1.3) Enroll peer0 Now we can enroll peer0 from the ca-mars.morgen.net CA. # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./peers/peer0/ export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer0.mars.morgen.net:peer0PW@ca-mars.morgen.net:7054 --csr.hosts 'peer0.mars.morgen.net' (3.1.5) peer0-mars.morgen.net enrolling with TLS-CA to get the tls certificate Now that we have enrolled the peer0 identity we also need to enroll the TLS identity for the peer. # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer0.mars.morgen.net:peer0PW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'peer0.mars.morgen.net' (3.1.6) Rename the private key from tls-ca We can rename the private key of the orderer for a possible later useage. mv peers/peer0/tls-msp/keystore/*_sk peers/peer0/tls-msp/keystore/key.pem (3.2) Enroll peer1 For peer1 we can do exactly the same enroll process as we did for peer0. (3.2.1) Preparation # we create peers folder mkdir -p peers/peer1/assets/{ca,tls-ca} (3.2.2) Copy needed CA certs # copy orgs root certificate to the peer cp ./ca/server/crypto/ca-cert.pem ./peers/peer1/assets/ca/mars.morgen.net-ca-cert.pem # copying TLS-CA root certificate to the peer for tls authentication cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer1/assets/tls-ca/ (3.2.4) Enroll peer1 Now we can enroll peer1 from the ca-mars.morgen.net CA. export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./peers/peer1/ export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer1.mars.morgen.net:peer1PW@ca-mars.morgen.net:7054 --csr.hosts 'peer1.mars.morgen.net' (3.2.5) peer1-mars.morgen.net enrolling with TLS-CA to get the tls certificate export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer1.mars.morgen.net:peer1PW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'peer1.mars.morgen.net' (3.2.6) rename the private key from tls-ca mv peers/peer1/tls-msp/keystore/*_sk peers/peer1/tls-msp/keystore/key.pem (4) Set up MSP We have to set up the organization MSP. (4.1) Create base MSP folder mkdir -p msp/{admincerts,cacerts,tlscacerts,users} (4.3) Copy necessary certs # copy org mars root ca certificat to msp/cacerts directory cp ./ca/server/crypto/ca-cert.pem ./msp/cacerts/mars.morgen.net-ca-cert.pem #copy TLS CA root certificat to msp/tlscacerts directory cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer1/assets/tls-ca/ # copy org mars admin singning certificat to msp/admincerts directory cp ./admin/msp/signcerts/cert.pem ./msp/admincerts/mars.morgen.net-admin-cert.pem (5) Identity Classification For identity classification we have to set up the config.yaml file in a given MSP folder. vi msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: orderer vi admin/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer vi peers/peer0/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer vi peers/peer1/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer","title":"Set up ca-mars.morgen.net"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#set-up-ca-marsmorgennet","text":"The ca-mars.morgen.net organization is our main organization in this example. This organization runs the blockchain for hin own need. As we have seen the set up process for the CA is the same as we have done it already for the ca-orderer.morgen.net. basic preparation (including TLS certificate for the CA bootstrap identity, docker-compose set up and CA set up process) the creation of the CA admin the enrollment of the organisation members","title":"Set up ca-mars.morgen.net"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#1-basic-preparation","text":"","title":"(1) Basic preparation"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#11-create-the-base-folders","text":"Frist we switch into the organisation folder and create the base folders, where our CA is living. cd ca-mars.morgen.net mkdir -p ca/server mkdir -p ca/client/{admin,tls-admin} As a next step we are going the enroll the TLS certificate for the CAs bootstrap admin identity. This identity we have already registered in the set up process from the ca-tls.morgen.net organisation. For this we have to copy the main TLS-CA cert to the both admin directories. # copy ca-tls cert for bootstrap ca identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/tls-admin # copy ca-tls cert for admin ca admin identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/admin Now we can enroll the TLS identity for the organizations admin. # set the needed environment vars export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem # enroll the admin fabric-ca-client enroll -d -u https://ca-mars.morgen.net-admin:ca-mars-adminpw@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'ca-mars.morgen.net' # rename admins private key for later CA configuration mv ca/client/tls-admin/tls-msp/keystore/*_sk ca/client/tls-admin/tls-msp/keystore/key.pem","title":"(1.1) Create the base folders"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#12-create-docker-compose-file","text":"We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-mars.morgen.net: container_name: ca-mars.morgen.net image: hyperledger/fabric-ca:1.4.6 command: /bin/bash -c 'fabric-ca-server init -b ca-mars.morgen.net-admin:${CaMarsAdminPw} --port 7054' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_TLS_ENABLED=true - FABRIC_CA_SERVER_CSR_CN=ca-mars.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-mars.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca - ./ca/client:/tmp/hyperledger/fabric-ca-client networks: - morgen ports: - 7054:7054","title":"(1.2) Create docker-compose file"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#13-initialise-the-ca","text":"docker-compose up The set up process is the same as for ca-tls.morgen.net. The only thing we have to do is modify the fabric-ca-server-config.yaml and set the ca.name to ca-mars.morgen.net. Then you can modify the docker-compose.yaml file and replace the init command with start . # modify fabric-ca-server config vi ca/server/crypto/fabric-ca-server-config.yaml # change - modify docker-compose.yaml file #tls: ## Enable TLS (default: false) # enabled: true ## TLS for the server's listening port # certfile: /tmp/hyperledger/fabric-ca-client/tls-admin/tls-msp/signcerts/cert.pem # keyfile: /tmp/hyperledger/fabric-ca-client/tls-admin/tls-msp/keystore/key.pem #ca: # Name of this CA # name: ca-mars.morgen.net # -------------------------------- # modify docker-compose.yaml file # -------------------------------- vi docker-compose.yaml # change the command parameter command: sh -c 'fabric-ca-server start -b ca-orderer.morgen.net-admin:${CaMarsAdminPw} --port 7053'","title":"(1.3) Initialise the CA"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#14-start-the-ca","text":"After following the previous steps, we can start the orderer organisation CA. # start the CA in the background docker-compose up -d # check it the CA is running docker-compose ps # check the logs docker-compose logs","title":"(1.4) Start the CA"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#15-enroll-the-ca-marsmorgennet-admin-preparation","text":"First we have to set two enviroments variables. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem","title":"(1.5) Enroll the ca-mars.morgen.net-admin - preparation"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#16-enroll-the-ca-orderermorgen-net-admin-enrollement","text":"After the environment variables are set we can enroll the ca-admin user for this particular organisation. fabric-ca-client enroll -d -u https://ca-mars.morgen.net-admin:ca-mars-adminpw@ca-mars.morgen.net:7054 --csr.hosts 'ca-mars.morgen.net' With these steps we have finally finished the set up process of the ca-orderer.morgen.net CA. Now the admin of this CA can start to interact with this CA to register members for this organization.","title":"(1.6) Enroll the ca-orderer.morgen-net-admin - enrollement"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#17-register-the-members-of-the-network","text":"As a next step we register the organization members for a later usage. In this organization we are going to use following organization members: two peer nodes and one admin user for this organization one client user for the node.js application The steps to enroll an identity are basically always the same: We register an identity with the corresponding CA. We enroll this identity. If needed, we enroll the TLS identity with the corresponding TLS-CA. Note in our case we have already registered the orderer node TLS identity in previous steps. Let's go and register the members. # peer0 fabric-ca-client register -d --id.name peer0.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-mars.morgen.net:7054 --csr.hosts 'peer0.mars.morgen.net' # peer1 fabric-ca-client register -d --id.name peer1.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-mars.morgen.net:7054 --csr.hosts 'peer1.mars.morgen.net' # an organization admin fabric-ca-client register -d --id.name admin-mars.morgen.net --id.secret marsAdminPW --id.type admin -u https://ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' # an organization client user fabric-ca-client register -d --id.name user1-mars.morgen.net --id.secret marsUserPW --id.type client -u https://ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net'","title":"(1.7) Register the members of the network"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#2-creation-of-the-mars-organization-admin","text":"Now we can set up the admin user for the mars organization nodes. The admin user is required to administrate the peer nodes of this organization.","title":"(2) Creation of the mars organization admin"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#21-create-base-folder","text":"We create an base folder for the orderer admin user. mkdir -p admin/ca","title":"(2.1) Create base folder"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#22-copy-ca-cert-file","text":"For TLS communication we copy the ca-tls.morgen.net.cert.pem file to the admin folder. cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem admin/ca","title":"(2.2) Copy ca-cert file"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#23-enroll-the-admin","text":"To enroll the orderer admin we have to do two steps we need to set some environment variables we enroll the admin","title":"(2.3) Enroll the admin"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#231-set-environment-variables","text":"# set needed environment vars export FABRIC_CA_CLIENT_HOME=./admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca/ca-tls.morgen.net.cert.pem export FABRIC_CA_CLIENT_MSPDIR=msp","title":"(2.3.1) Set environment variables"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#232-enrollment-of-the-admin","text":"Enroll the orderer admin user. fabric-ca-client enroll -d -u https://admin-mars.morgen.net:marsAdminPW@ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net'","title":"(2.3.2) Enrollment of the admin"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#3-set-up-the-peers","text":"","title":"(3) Set up the peers"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#31-enroll-peer-peer0marsmorgennet","text":"","title":"(3.1) Enroll peer peer0.mars.morgen.net"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#311-preparation","text":"We create the following folderstructur for the peer. This folder is used later at runtime and will mountend into the each peer container. mkdir -p peers/peer0/assets/{ca,tls-ca}","title":"(3.1.1) Preparation"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#312-copy-needed-ca-certs","text":"# copy orgs root certificate to the peer cp ./ca/server/crypto/ca-cert.pem ./peers/peer0/assets/ca/mars.morgen.net-ca-cert.pem # copying TLS-CA root certificate to the peer for tls authentication cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer0/assets/tls-ca/","title":"(3.1.2) Copy needed CA certs"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#313-enroll-peer0","text":"Now we can enroll peer0 from the ca-mars.morgen.net CA. # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./peers/peer0/ export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer0.mars.morgen.net:peer0PW@ca-mars.morgen.net:7054 --csr.hosts 'peer0.mars.morgen.net'","title":"(3.1.3) Enroll peer0"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#315-peer0-marsmorgennet-enrolling-with-tls-ca-to-get-the-tls-certificate","text":"Now that we have enrolled the peer0 identity we also need to enroll the TLS identity for the peer. # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer0.mars.morgen.net:peer0PW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'peer0.mars.morgen.net'","title":"(3.1.5) peer0-mars.morgen.net enrolling with TLS-CA to get the tls certificate"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#316-rename-the-private-key-from-tls-ca","text":"We can rename the private key of the orderer for a possible later useage. mv peers/peer0/tls-msp/keystore/*_sk peers/peer0/tls-msp/keystore/key.pem","title":"(3.1.6) Rename the private key from tls-ca"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#32-enroll-peer1","text":"For peer1 we can do exactly the same enroll process as we did for peer0.","title":"(3.2) Enroll peer1"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#321-preparation","text":"# we create peers folder mkdir -p peers/peer1/assets/{ca,tls-ca}","title":"(3.2.1) Preparation"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#322-copy-needed-ca-certs","text":"# copy orgs root certificate to the peer cp ./ca/server/crypto/ca-cert.pem ./peers/peer1/assets/ca/mars.morgen.net-ca-cert.pem # copying TLS-CA root certificate to the peer for tls authentication cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer1/assets/tls-ca/","title":"(3.2.2) Copy needed CA certs"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#324-enroll-peer1","text":"Now we can enroll peer1 from the ca-mars.morgen.net CA. export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./peers/peer1/ export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer1.mars.morgen.net:peer1PW@ca-mars.morgen.net:7054 --csr.hosts 'peer1.mars.morgen.net'","title":"(3.2.4) Enroll peer1"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#325-peer1-marsmorgennet-enrolling-with-tls-ca-to-get-the-tls-certificate","text":"export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=assets/tls-ca/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://peer1.mars.morgen.net:peer1PW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'peer1.mars.morgen.net'","title":"(3.2.5) peer1-mars.morgen.net enrolling with TLS-CA to get the tls certificate"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#326-rename-the-private-key-from-tls-ca","text":"mv peers/peer1/tls-msp/keystore/*_sk peers/peer1/tls-msp/keystore/key.pem","title":"(3.2.6) rename the private key from tls-ca"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#4-set-up-msp","text":"We have to set up the organization MSP.","title":"(4) Set up MSP"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#41-create-base-msp-folder","text":"mkdir -p msp/{admincerts,cacerts,tlscacerts,users}","title":"(4.1) Create base MSP folder"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#43-copy-necessary-certs","text":"# copy org mars root ca certificat to msp/cacerts directory cp ./ca/server/crypto/ca-cert.pem ./msp/cacerts/mars.morgen.net-ca-cert.pem #copy TLS CA root certificat to msp/tlscacerts directory cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ./peers/peer1/assets/tls-ca/ # copy org mars admin singning certificat to msp/admincerts directory cp ./admin/msp/signcerts/cert.pem ./msp/admincerts/mars.morgen.net-admin-cert.pem","title":"(4.3)  Copy necessary certs"},{"location":"administrator/morgen.net/ca-mars.morgen.net/#5-identity-classification","text":"For identity classification we have to set up the config.yaml file in a given MSP folder. vi msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/mars.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: orderer vi admin/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer vi peers/peer0/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer vi peers/peer1/msp/config.yaml NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/0-0-0-0-7054.pem OrganizationalUnitIdentifier: orderer","title":"(5) Identity Classification"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/","text":"Set up ca-orderer.morgen.net The first organization we are going to set up is the orderer organization. The set up process can be divided into following main steps: basic preparation (including TLS certificate for the CA bootstrap identity, docker-compose set up and CA set up process) the creation of the CA admin the enrollment of the organisation members (1) Basic preparation (1.1) Create the base folders Frist we switch into the organisation folder and create the base folders. cd ca-orderer.morgen.net # the server base folder mkdir -p ca/server # the ca client folder for the admin and the tls-cert from the central tls-service mkdir -p ca/client/{admin,tls-admin} As a next step we are going the enroll the TLS certificate for the CAs bootstrap admin identity. This identity we have already registered in the set up process from the ca-tls.morgen.net organisation. For this we have to copy the main TLS-CA cert to the both admin directories. # copy ca-tls cert for bootstrap ca identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/tls-admin/ # copy ca-tls cert for admin ca admin identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/admin/ Now we can enroll the TLS identity for the organizations admin. # set the needed environment vars export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem # enroll the admin fabric-ca-client enroll -d -u https://ca-orderer.morgen.net-admin:ca-orderer-adminpw@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'ca-orderer.morgen.net' # rename admins private key for later CA configuration mv ca/client/tls-admin/msp/keystore/*_sk ca/client/tls-admin/msp/keystore/key.pem Important: The organization CA TLS signed certificate is generated under ca/client/admin/msp/signcert and the private key is available under ca/client/admin/msp/keystore. When you deploy the organization CA you will need to point to the location of these two files in the tls section of the CA configuration .yaml file. For ease of reference, you can rename the file in the keystore folder to key.pem. (1.2) Create docker-compose file We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-orderer.morgen.net: container_name: ca-orderer.morgen.net image: hyperledger/fabric-ca:1.4.4 command: sh -c 'fabric-ca-server init -b ca-orderer.morgen.net-admin:${CaOrdererAminPw} --port 7053' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_CSR_CN=ca-orderer.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-orderer.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca - ./ca/client:/tmp/hyperledger/fabric-ca-client networks: - morgen ports: - 7053:7053 To hide the bootstrap identity password we can use the docker-compose .env file functionality. As you can see in the command line above we use a docker-compose environment variable ${CaOrdererAminPw} for this. In order to get this working we need to create a .env file beside the docker-compose.yaml file. # create the file vi .env # add the password in the format: var=value CaOrdererAminPw=ca-orderer-adminpw One note at this point : It is not allowed to use signs like spaces ( ), hyphen (-) or underlines (_) in the variable name. (1.3) Initialise the CA To initialise the CA we start the CA with the following command. docker-compose up Note, we use the fabric-ca init command in docker-compose file. So to start the server finally we have to change the command from init to start. The set up process is basically the same as for ca-tls.morgen.net. The only thing we have to do is modify the fabric-ca-server-config.yaml. After you have done this, you can modify the docker-compose.yaml file and replace the init command with start to start the CA finally. # ------------------------------------------ # modify fabric-ca-server-config.yaml file # ------------------------------------------ vi ca/server/crypto/fabric-ca-server-config.yaml # tls: # # Enable TLS (default: false) # enabled: true # # TLS for the server's listening port # certfile: /tmp/hyperledger/fabric-ca-client/tls-admin/msp/signcerts/cert.pem # keyfile: /tmp/hyperledger/fabric-ca-client/tls-admin/msp/keystore/key.pem # ca: # # Name of this CA # name: ca-orderer.morgen.net # -------------------------------- # modify docker-compose.yaml file # -------------------------------- vi docker-compose.yaml # change the command parameter command: sh -c 'fabric-ca-server start -b ca-orderer.morgen.net-admin:${CaOrdererAminPw} --port 7053' (1.4) Start the CA After following the previous steps, we can start the orderer organisation CA. # start the CA in the background docker-compose up -d # check it the CA is running docker-compose ps # check the logs docker-compose logs (1.5) Enroll the ca-orderer.morgen.net-admin - preparation First we have to set two enviroments variables. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem (1.6) Enroll the ca-orderer.morgen-net-admin - enrollement After the environment variables are set we can enroll the ca-admin user for this particular organisation. fabric-ca-client enroll -d -u https://ca-orderer.morgen.net-admin:ca-orderer-adminpw@ca-orderer.morgen.net:7053 --csr.hosts 'ca-orderer.morgen.net' With these steps we have finally finished the set up process of the ca-orderer.morgen.net CA. Now the admin of this CA can start to interact with this CA to register members for this organization. (1.7) Register the members of the network As a next step we register the organization members for a later usage. In this organization we are going to use two organization members: one orderer node (we use the solo orderer system) and one admin user for this orderer The steps to enroll an identity are basically always the same: We register an identity with the corresponding CA. We enroll this identity. If needed, we enroll the TLS identity with the corresponding TLS-CA. Note in our case we have already registered the orderer node TLS identity in previous steps. Let's go and register the members. # orderer node fabric-ca-client register -d --id.name orderer.morgen.net --id.secret ordererpw --id.type orderer -u https://ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net' # admin for the orderer node fabric-ca-client register -d --id.name admin-orderer.morgen.net --id.secret org0adminpw --id.type admin --id.attrs \"hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert\" -u https://ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net' (2) Creation of the Orderer admin Now we can set up the admin user for the orderer node. The admin user is required to administrate this orderer node. (2.1) Create base folder We create an base folder for the orderer admin user. mkdir -p admin/ca (2.2) Copy TLS cert For TLS communication we copy the ca-tls.morgen.net.cert.pem file to the admin folder. cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem admin/ca (2.3) Enroll the admin To enroll the orderer admin we have to do two steps we need to set some environment variables we enroll the admin (2.3.1) Set environment variables # set needed environment vars export FABRIC_CA_CLIENT_HOME=./admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca/ca-tls.morgen.net.cert.pem export FABRIC_CA_CLIENT_MSPDIR=msp (2.3.2) Enrollment of the admin Enroll the orderer admin user. fabric-ca-client enroll -d -u https://admin-orderer.morgen.net:org0adminpw@ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net' (3) Setup the orderer (3.1) Preparetion We create an assets folder for the orderer. This folder is used later at runtime and will mountend into the orderer container. mkdir -p orderer/assets/ca mkdir orderer/assets/ca-tls.morgen.net (3.2) Copy needed ca-certs We copy two certificates to the orderers assets folder. 1. the ca-cert.pem from the orderer organization CA and 2. the ca-cert.pem from the TLS CA. # ca-orderer ca-cert cp ./ca/server/crypto/ca-cert.pem ./orderer/assets/ca/orderer.morgen.net-ca-cert.pem # ca-tls ca-cert cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./orderer/assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem #cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./admin/ca-tls.morgen.net.cert.pem (3.3) Enroll the orderer (3.3.1) Set environment variables We set two environment variables for the enrollment of the orderer. # set the required environment vars export FABRIC_CA_CLIENT_HOME=./orderer export FABRIC_CA_CLIENT_TLS_CERTFILES=./assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem (3.3.2) Enroll the orderer Since we have already registered the orderer as an identity, we can now enroll it (ca-orderer.morgen.net). fabric-ca-client enroll -d -u https://orderer.morgen.net:ordererpw@ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net' (3.3.3) Enroll the orderer TLS Since we have already registered the TLS identity for the orderer, we can now enroll it (ca-tls.morgen.net). # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=./assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem # enroll the tls profile of the orderer fabric-ca-client enroll -d -u https://orderer.morgen.net:ordererPW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'orderer.morgen.net' (3.3.4) Rename the orderers private key We can rename the private key of the orderer for a possible later useage. mv ./orderer/tls-msp/keystore/*_sk ./orderer/tls-msp/keystore/key.pem (4) Setup the MSP The orderer as any other part of a fabric-network need a Membership Service Provider (MSP). We create that as a last step in the set up process of the orderer. In this steps we are going to copy the created certifcates to the right place. (4.1) Create base folder structure The MSP has a fixed folder structure which we can create with the following command. mkdir -p msp/{admincerts,cacerts,tlscacerts,users} (4.2) Copy necessary certs # organization ca-cert cp ./ca/server/crypto/ca-cert.pem ./msp/cacerts/orderer.morgen.net-ca-cert.pem # TLS ca-cert cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./msp/tlscacerts/ca-tls.morgen.net.cert.pem # organization admin cert cp ./admin/msp/signcerts/cert.pem ./msp/admincerts/orderer.morgen.net-admin-cert.pem (5) Identity Classification For identity classification we have to set up the config.yaml file in a given MSP folder. # create the config.yaml file vi orderer/msp/config.yaml # add the following content NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: orderer","title":"Set up ca-orderer.morgen.net"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#set-up-ca-orderermorgennet","text":"The first organization we are going to set up is the orderer organization. The set up process can be divided into following main steps: basic preparation (including TLS certificate for the CA bootstrap identity, docker-compose set up and CA set up process) the creation of the CA admin the enrollment of the organisation members","title":"Set up ca-orderer.morgen.net"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#1-basic-preparation","text":"","title":"(1) Basic preparation"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#11-create-the-base-folders","text":"Frist we switch into the organisation folder and create the base folders. cd ca-orderer.morgen.net # the server base folder mkdir -p ca/server # the ca client folder for the admin and the tls-cert from the central tls-service mkdir -p ca/client/{admin,tls-admin} As a next step we are going the enroll the TLS certificate for the CAs bootstrap admin identity. This identity we have already registered in the set up process from the ca-tls.morgen.net organisation. For this we have to copy the main TLS-CA cert to the both admin directories. # copy ca-tls cert for bootstrap ca identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/tls-admin/ # copy ca-tls cert for admin ca admin identity cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem ca/client/admin/ Now we can enroll the TLS identity for the organizations admin. # set the needed environment vars export FABRIC_CA_CLIENT_HOME=./ca/client/tls-admin export FABRIC_CA_CLIENT_TLS_CERTFILES=./ca-tls.morgen.net.cert.pem # enroll the admin fabric-ca-client enroll -d -u https://ca-orderer.morgen.net-admin:ca-orderer-adminpw@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'ca-orderer.morgen.net' # rename admins private key for later CA configuration mv ca/client/tls-admin/msp/keystore/*_sk ca/client/tls-admin/msp/keystore/key.pem Important: The organization CA TLS signed certificate is generated under ca/client/admin/msp/signcert and the private key is available under ca/client/admin/msp/keystore. When you deploy the organization CA you will need to point to the location of these two files in the tls section of the CA configuration .yaml file. For ease of reference, you can rename the file in the keystore folder to key.pem.","title":"(1.1) Create the base folders"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#12-create-docker-compose-file","text":"We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-orderer.morgen.net: container_name: ca-orderer.morgen.net image: hyperledger/fabric-ca:1.4.4 command: sh -c 'fabric-ca-server init -b ca-orderer.morgen.net-admin:${CaOrdererAminPw} --port 7053' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_CSR_CN=ca-orderer.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-orderer.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca - ./ca/client:/tmp/hyperledger/fabric-ca-client networks: - morgen ports: - 7053:7053 To hide the bootstrap identity password we can use the docker-compose .env file functionality. As you can see in the command line above we use a docker-compose environment variable ${CaOrdererAminPw} for this. In order to get this working we need to create a .env file beside the docker-compose.yaml file. # create the file vi .env # add the password in the format: var=value CaOrdererAminPw=ca-orderer-adminpw One note at this point : It is not allowed to use signs like spaces ( ), hyphen (-) or underlines (_) in the variable name.","title":"(1.2) Create docker-compose file"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#13-initialise-the-ca","text":"To initialise the CA we start the CA with the following command. docker-compose up Note, we use the fabric-ca init command in docker-compose file. So to start the server finally we have to change the command from init to start. The set up process is basically the same as for ca-tls.morgen.net. The only thing we have to do is modify the fabric-ca-server-config.yaml. After you have done this, you can modify the docker-compose.yaml file and replace the init command with start to start the CA finally. # ------------------------------------------ # modify fabric-ca-server-config.yaml file # ------------------------------------------ vi ca/server/crypto/fabric-ca-server-config.yaml # tls: # # Enable TLS (default: false) # enabled: true # # TLS for the server's listening port # certfile: /tmp/hyperledger/fabric-ca-client/tls-admin/msp/signcerts/cert.pem # keyfile: /tmp/hyperledger/fabric-ca-client/tls-admin/msp/keystore/key.pem # ca: # # Name of this CA # name: ca-orderer.morgen.net # -------------------------------- # modify docker-compose.yaml file # -------------------------------- vi docker-compose.yaml # change the command parameter command: sh -c 'fabric-ca-server start -b ca-orderer.morgen.net-admin:${CaOrdererAminPw} --port 7053'","title":"(1.3) Initialise the CA"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#14-start-the-ca","text":"After following the previous steps, we can start the orderer organisation CA. # start the CA in the background docker-compose up -d # check it the CA is running docker-compose ps # check the logs docker-compose logs","title":"(1.4) Start the CA"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#15-enroll-the-ca-orderermorgennet-admin-preparation","text":"First we have to set two enviroments variables. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem","title":"(1.5) Enroll the ca-orderer.morgen.net-admin - preparation"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#16-enroll-the-ca-orderermorgen-net-admin-enrollement","text":"After the environment variables are set we can enroll the ca-admin user for this particular organisation. fabric-ca-client enroll -d -u https://ca-orderer.morgen.net-admin:ca-orderer-adminpw@ca-orderer.morgen.net:7053 --csr.hosts 'ca-orderer.morgen.net' With these steps we have finally finished the set up process of the ca-orderer.morgen.net CA. Now the admin of this CA can start to interact with this CA to register members for this organization.","title":"(1.6) Enroll the ca-orderer.morgen-net-admin - enrollement"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#17-register-the-members-of-the-network","text":"As a next step we register the organization members for a later usage. In this organization we are going to use two organization members: one orderer node (we use the solo orderer system) and one admin user for this orderer The steps to enroll an identity are basically always the same: We register an identity with the corresponding CA. We enroll this identity. If needed, we enroll the TLS identity with the corresponding TLS-CA. Note in our case we have already registered the orderer node TLS identity in previous steps. Let's go and register the members. # orderer node fabric-ca-client register -d --id.name orderer.morgen.net --id.secret ordererpw --id.type orderer -u https://ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net' # admin for the orderer node fabric-ca-client register -d --id.name admin-orderer.morgen.net --id.secret org0adminpw --id.type admin --id.attrs \"hf.Registrar.Roles=client,hf.Registrar.Attributes=*,hf.Revoker=true,hf.GenCRL=true,admin=true:ecert,abac.init=true:ecert\" -u https://ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net'","title":"(1.7) Register the members of the network"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#2-creation-of-the-orderer-admin","text":"Now we can set up the admin user for the orderer node. The admin user is required to administrate this orderer node.","title":"(2) Creation of the Orderer admin"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#21-create-base-folder","text":"We create an base folder for the orderer admin user. mkdir -p admin/ca","title":"(2.1) Create base folder"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#22-copy-tls-cert","text":"For TLS communication we copy the ca-tls.morgen.net.cert.pem file to the admin folder. cp ../ca-tls.morgen.net/ca/client/crypto/ca-tls.morgen.net.cert.pem admin/ca","title":"(2.2) Copy TLS cert"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#23-enroll-the-admin","text":"To enroll the orderer admin we have to do two steps we need to set some environment variables we enroll the admin","title":"(2.3) Enroll the admin"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#231-set-environment-variables","text":"# set needed environment vars export FABRIC_CA_CLIENT_HOME=./admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca/ca-tls.morgen.net.cert.pem export FABRIC_CA_CLIENT_MSPDIR=msp","title":"(2.3.1) Set environment variables"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#232-enrollment-of-the-admin","text":"Enroll the orderer admin user. fabric-ca-client enroll -d -u https://admin-orderer.morgen.net:org0adminpw@ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net'","title":"(2.3.2) Enrollment of the admin"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#3-setup-the-orderer","text":"","title":"(3) Setup the orderer"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#31-preparetion","text":"We create an assets folder for the orderer. This folder is used later at runtime and will mountend into the orderer container. mkdir -p orderer/assets/ca mkdir orderer/assets/ca-tls.morgen.net","title":"(3.1) Preparetion"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#32-copy-needed-ca-certs","text":"We copy two certificates to the orderers assets folder. 1. the ca-cert.pem from the orderer organization CA and 2. the ca-cert.pem from the TLS CA. # ca-orderer ca-cert cp ./ca/server/crypto/ca-cert.pem ./orderer/assets/ca/orderer.morgen.net-ca-cert.pem # ca-tls ca-cert cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./orderer/assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem #cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./admin/ca-tls.morgen.net.cert.pem","title":"(3.2) Copy needed ca-certs"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#33-enroll-the-orderer","text":"","title":"(3.3) Enroll the orderer"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#331-set-environment-variables","text":"We set two environment variables for the enrollment of the orderer. # set the required environment vars export FABRIC_CA_CLIENT_HOME=./orderer export FABRIC_CA_CLIENT_TLS_CERTFILES=./assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem","title":"(3.3.1) Set environment variables"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#332-enroll-the-orderer","text":"Since we have already registered the orderer as an identity, we can now enroll it (ca-orderer.morgen.net). fabric-ca-client enroll -d -u https://orderer.morgen.net:ordererpw@ca-orderer.morgen.net:7053 --csr.hosts 'orderer.morgen.net'","title":"(3.3.2) Enroll the orderer"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#333-enroll-the-orderer-tls","text":"Since we have already registered the TLS identity for the orderer, we can now enroll it (ca-tls.morgen.net). # set the required environment vars export FABRIC_CA_CLIENT_MSPDIR=tls-msp export FABRIC_CA_CLIENT_TLS_CERTFILES=./assets/ca-tls.morgen.net/ca-tls.morgen.net.cert.pem # enroll the tls profile of the orderer fabric-ca-client enroll -d -u https://orderer.morgen.net:ordererPW@ca-tls.morgen.net:7052 --enrollment.profile tls --csr.hosts 'orderer.morgen.net'","title":"(3.3.3) Enroll the orderer TLS"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#334-rename-the-orderers-private-key","text":"We can rename the private key of the orderer for a possible later useage. mv ./orderer/tls-msp/keystore/*_sk ./orderer/tls-msp/keystore/key.pem","title":"(3.3.4) Rename the orderers private key"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#4-setup-the-msp","text":"The orderer as any other part of a fabric-network need a Membership Service Provider (MSP). We create that as a last step in the set up process of the orderer. In this steps we are going to copy the created certifcates to the right place.","title":"(4) Setup the MSP"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#41-create-base-folder-structure","text":"The MSP has a fixed folder structure which we can create with the following command. mkdir -p msp/{admincerts,cacerts,tlscacerts,users}","title":"(4.1) Create base folder structure"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#42-copy-necessary-certs","text":"# organization ca-cert cp ./ca/server/crypto/ca-cert.pem ./msp/cacerts/orderer.morgen.net-ca-cert.pem # TLS ca-cert cp ../ca-tls.morgen.net/ca/server/crypto/ca-cert.pem ./msp/tlscacerts/ca-tls.morgen.net.cert.pem # organization admin cert cp ./admin/msp/signcerts/cert.pem ./msp/admincerts/orderer.morgen.net-admin-cert.pem","title":"(4.2) Copy necessary certs"},{"location":"administrator/morgen.net/ca-orderer.morgen.net/#5-identity-classification","text":"For identity classification we have to set up the config.yaml file in a given MSP folder. # create the config.yaml file vi orderer/msp/config.yaml # add the following content NodeOUs: Enable: true ClientOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: client PeerOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: peer AdminOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: admin OrdererOUIdentifier: Certificate: cacerts/orderer.morgen.net-ca-cert.pem OrganizationalUnitIdentifier: orderer","title":"(5) Identity Classification"},{"location":"administrator/morgen.net/ca-tls.morgen.net/","text":"Set up ca-tls.morgen.net (1.1) Create the base folders Frist we switch into the organisation folder and create some base folders for the ca-tls.morgen.net organisation. This organisation provides all required TLS certificates for the whole network. cd ca-tls.morgen.net # this is the CA base folder mkdir -p ca/server/crypto # this is for the ca admin mkdir -p ca/client/crypto (1.2) Create docker-compose file We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-tls.morgen.net: container_name: ca-tls.morgen.net image: hyperledger/fabric-ca:1.4.6 command: sh -c 'fabric-ca-server init -b ca-tls.morgen.net-admin:${ca-tls.morgen.net-adminpw} --port 7052' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_CSR_CN=ca-tls.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-tls.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca networks: - morgen ports: - 7052:7052 The set up process of a fabric-ca is basically divided into three steps. 1. We have to initialise the CA with the init command. 2. We have to modify the fabric-ca-client-config.yaml file to fit our needs. 3. Lastly we can start the CA with the start command. (1.3) Initialise the CA docker-compose up (1.3.1) What does the CA server init command do? The init command does not actually start the server but generates the required metadata if it does not already exist for the server: Sets the default the CA Home directory (referred to as FABRIC_CA_HOME in these instructions) to where the fabric-ca-server init command is run. Generates the default configuration file fabric-ca-server-config.yaml that is used as a template for your server configuration in the FABRIC_CA_HOME directory. We refer to this file throughout these instructions as the \u201cconfiguration .yaml\u201d file. Creates the TLS CA root signed certificate file ca-cert.pem, if it does not already exist in the CA Home directory. This is the self-signed root certificate, meaning it is generated and signed by the TLS CA itself and does not come from another source. This certificate is the public key that must be shared with all clients that want to transact with any node in the organization. When any client or node submits a transaction to another node, it must include this certificate as part of the transaction. Generates the CA server private key and stores it in the FABRIC_CA_HOME directory under /msp/keystore. Initializes a default SQLite database for the server although you can modify the database setting in the configuration .yaml file to use the supported database of your choice. Every time the server is started, it loads the data from this database. If you later switch to a different database such as PostgreSQL or MySQL, and the identities defined in the registry.identites section of the configuration .yaml file don\u2019t exist in that database, they will be registered. Bootstraps the CA server administrator, specified by the -b flag parameters and , onto the server. When the CA server is subsequently started, the admin user is registered with the admin attributes provided in the configuration .yaml file registry section. If this CA will be used to register other users with any of those attributes, then the CA admin user needs to possess those attributes. In other words, the registrar must have the hf.Registrar.Roles attributes before it can register another identity with any of those attributes. Therefore, if this CA admin will be used to register the admin identity for an Intermediate CA, then this CA admin must have the hf.IntermediateCA set to true even though this may not be an intermediate CA server. The default settings already include these attributes. (1.4) Modify the fabric-ca-server-config.yaml If it is needed give the $USER the right to modify the config file. sudo chown $USER ca/server/crypto/fabric-ca-server-config.yaml The fabric-ca-server-config.yaml ist the main configuration file from the Fabric-CA Server. We have to pay particular attention to some points here. But for now we modify the ca.name attribute to ca-tls.morgen.net. # modify the config file vi ca/server/crypto/fabric-ca-server-config.yaml # modify these config parameters # tls: # Enable TLS (default: false) # enabled: true # ca: # name: ca-tls.morgen.net If you modified any of the values in the CSR block of the configuration yaml file, you need to delete the fabric-ca-server-tls/ca-cert.pem file and the entire fabric-ca-server-tls/msp folder. These certificates will be re-generated when you start the CA server in the next step. After this modification we can adjust the docker-compose.yaml file for the final start. We have to change the docker start command from init to start. command: sh -c 'fabric-ca-server start -b ca-tls.morgen.net-admin:${ca-tls.morgen.net-adminpw} --port 7052' (1.5) Start the CA After we have made all the adjustments, we can start the TLS CA in the background with the following command. docker-compose up -d # check the running container docker-compose ps Name Command State Ports --------------------------------------------------------------------------------------------- ca-tls.morgen.net sh -c fabric-ca-server sta ... Up 0.0.0.0:7052->7052/tcp, 7054/tcp Now your TLS CA is up and running. As a next step we can enroll the admin user for this dedicated TLS-CA and do the registration of all TLS identities for this network. (1.6) Copy the TLS CA root certificate Copy the TLS CA root certificate file ca-cert.pem, that was generated when the TLS CA server was started, to a new file name ca-tls.morgen.net.cert.pem. Notice the file name is changed to ca-tls.morgen.net.cert.pem to make it clear this is the root certificate from the TLS CA. Important: This TLS CA root certificate will need to be available on each client system that will run commands against the TLS CA. cp ./ca/server/crypto/ca-cert.pem ./ca/client/crypto/ca-tls.morgen.net.cert.pem (1.7) Enroll the TLS-CA admin - preparation To enroll the TLS CA admin, we have to set the following evironment variables. With these variables we point out where the fabirc-ca-client-home is based and where the tls certificates is located under the fabric-ca-client-home directory. export FABRIC_CA_CLIENT_HOME=./ca/client export FABRIC_CA_CLIENT_TLS_CERTFILES=crypto/ca-tls.morgen.net.cert.pem (1.8) Enrollment of the ca-tls.morgen-net-admin fabric-ca-client enroll -d -u https://ca-tls.morgen.net-admin:ca-tls.morgen.net-adminpw@ca-tls.morgen.net:7052 --csr.hosts 'ca-tls.morgen.net' (1.9) Register TLS members of the network Based on the given network structure we register our network members (peers and orderer) to provide TLS communication between the single nodes. In a further step we are register all CA bootstrap identities for this network against this TLS CA. ```bash register network nodes peer0 fabric-ca-client register -d --id.name peer0.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-tls.morgen.net:7052 --csr.hosts 'peer0.mars.morgen.net' peer1 fabric-ca-client register -d --id.name peer1.mars.morgen.net --id.secret peer1PW --id.type peer -u https://ca-tls.morgen.net:7052 --csr.hosts 'peer1.mars.morgen.net' orderer fabric-ca-client register -d --id.name orderer.morgen.net --id.secret ordererPW --id.type orderer -u https://ca-tls.morgen.net:7052 --csr.hosts 'orderer.morgen.net' register CA bootstrap identiies register ca-orderer.morgen.net organization CA bootstrap identity with the TLS-CA fabric-ca-client register -d --id.name ca-orderer.morgen.net-admin --id.secret ca-orderer-adminpw -u https://ca-tls.morgen.net:7052 --csr.hosts 'ca-orderer.morgen.net' register ca-mars.morgen.net organization CA bootstrap identity with the TLS-CA fabric-ca-client register -d --id.name ca-mars.morgen.net-admin --id.secret ca-mars-adminpw -u https://ca-tls.morgen.net:7052 --csr.hosts 'ca-mars.morgen.net' ```` Terms CSR (certificate signing request) IP SANs (IP subject alternative names) Helper openssl x509 -noout -text -in file.pem","title":"Set up ca-tls.morgen.net"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#set-up-ca-tlsmorgennet","text":"","title":"Set up ca-tls.morgen.net"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#11-create-the-base-folders","text":"Frist we switch into the organisation folder and create some base folders for the ca-tls.morgen.net organisation. This organisation provides all required TLS certificates for the whole network. cd ca-tls.morgen.net # this is the CA base folder mkdir -p ca/server/crypto # this is for the ca admin mkdir -p ca/client/crypto","title":"(1.1) Create the base folders"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#12-create-docker-compose-file","text":"We create the following docker.compose.yaml file. # create a new file vi docker-compose.yaml # add the following content version: \"3.3\" networks: morgen: services: ca-tls.morgen.net: container_name: ca-tls.morgen.net image: hyperledger/fabric-ca:1.4.6 command: sh -c 'fabric-ca-server init -b ca-tls.morgen.net-admin:${ca-tls.morgen.net-adminpw} --port 7052' environment: - FABRIC_CA_SERVER_HOME=/tmp/hyperledger/fabric-ca/crypto - FABRIC_CA_SERVER_CSR_CN=ca-tls.morgen.net - FABRIC_CA_SERVER_CSR_HOSTS=ca-tls.morgen.net - FABRIC_CA_SERVER_DEBUG=true volumes: - ./ca/server:/tmp/hyperledger/fabric-ca networks: - morgen ports: - 7052:7052 The set up process of a fabric-ca is basically divided into three steps. 1. We have to initialise the CA with the init command. 2. We have to modify the fabric-ca-client-config.yaml file to fit our needs. 3. Lastly we can start the CA with the start command.","title":"(1.2) Create docker-compose file"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#13-initialise-the-ca","text":"docker-compose up","title":"(1.3) Initialise the CA"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#131-what-does-the-ca-server-init-command-do","text":"The init command does not actually start the server but generates the required metadata if it does not already exist for the server: Sets the default the CA Home directory (referred to as FABRIC_CA_HOME in these instructions) to where the fabric-ca-server init command is run. Generates the default configuration file fabric-ca-server-config.yaml that is used as a template for your server configuration in the FABRIC_CA_HOME directory. We refer to this file throughout these instructions as the \u201cconfiguration .yaml\u201d file. Creates the TLS CA root signed certificate file ca-cert.pem, if it does not already exist in the CA Home directory. This is the self-signed root certificate, meaning it is generated and signed by the TLS CA itself and does not come from another source. This certificate is the public key that must be shared with all clients that want to transact with any node in the organization. When any client or node submits a transaction to another node, it must include this certificate as part of the transaction. Generates the CA server private key and stores it in the FABRIC_CA_HOME directory under /msp/keystore. Initializes a default SQLite database for the server although you can modify the database setting in the configuration .yaml file to use the supported database of your choice. Every time the server is started, it loads the data from this database. If you later switch to a different database such as PostgreSQL or MySQL, and the identities defined in the registry.identites section of the configuration .yaml file don\u2019t exist in that database, they will be registered. Bootstraps the CA server administrator, specified by the -b flag parameters and , onto the server. When the CA server is subsequently started, the admin user is registered with the admin attributes provided in the configuration .yaml file registry section. If this CA will be used to register other users with any of those attributes, then the CA admin user needs to possess those attributes. In other words, the registrar must have the hf.Registrar.Roles attributes before it can register another identity with any of those attributes. Therefore, if this CA admin will be used to register the admin identity for an Intermediate CA, then this CA admin must have the hf.IntermediateCA set to true even though this may not be an intermediate CA server. The default settings already include these attributes.","title":"(1.3.1) What does the CA server init command do?"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#14-modify-the-fabric-ca-server-configyaml","text":"If it is needed give the $USER the right to modify the config file. sudo chown $USER ca/server/crypto/fabric-ca-server-config.yaml The fabric-ca-server-config.yaml ist the main configuration file from the Fabric-CA Server. We have to pay particular attention to some points here. But for now we modify the ca.name attribute to ca-tls.morgen.net. # modify the config file vi ca/server/crypto/fabric-ca-server-config.yaml # modify these config parameters # tls: # Enable TLS (default: false) # enabled: true # ca: # name: ca-tls.morgen.net If you modified any of the values in the CSR block of the configuration yaml file, you need to delete the fabric-ca-server-tls/ca-cert.pem file and the entire fabric-ca-server-tls/msp folder. These certificates will be re-generated when you start the CA server in the next step. After this modification we can adjust the docker-compose.yaml file for the final start. We have to change the docker start command from init to start. command: sh -c 'fabric-ca-server start -b ca-tls.morgen.net-admin:${ca-tls.morgen.net-adminpw} --port 7052'","title":"(1.4) Modify the fabric-ca-server-config.yaml"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#15-start-the-ca","text":"After we have made all the adjustments, we can start the TLS CA in the background with the following command. docker-compose up -d # check the running container docker-compose ps Name Command State Ports --------------------------------------------------------------------------------------------- ca-tls.morgen.net sh -c fabric-ca-server sta ... Up 0.0.0.0:7052->7052/tcp, 7054/tcp Now your TLS CA is up and running. As a next step we can enroll the admin user for this dedicated TLS-CA and do the registration of all TLS identities for this network.","title":"(1.5) Start the CA"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#16-copy-the-tls-ca-root-certificate","text":"Copy the TLS CA root certificate file ca-cert.pem, that was generated when the TLS CA server was started, to a new file name ca-tls.morgen.net.cert.pem. Notice the file name is changed to ca-tls.morgen.net.cert.pem to make it clear this is the root certificate from the TLS CA. Important: This TLS CA root certificate will need to be available on each client system that will run commands against the TLS CA. cp ./ca/server/crypto/ca-cert.pem ./ca/client/crypto/ca-tls.morgen.net.cert.pem","title":"(1.6) Copy the TLS CA root certificate"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#17-enroll-the-tls-ca-admin-preparation","text":"To enroll the TLS CA admin, we have to set the following evironment variables. With these variables we point out where the fabirc-ca-client-home is based and where the tls certificates is located under the fabric-ca-client-home directory. export FABRIC_CA_CLIENT_HOME=./ca/client export FABRIC_CA_CLIENT_TLS_CERTFILES=crypto/ca-tls.morgen.net.cert.pem","title":"(1.7) Enroll the TLS-CA admin - preparation"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#18-enrollment-of-the-ca-tlsmorgen-net-admin","text":"fabric-ca-client enroll -d -u https://ca-tls.morgen.net-admin:ca-tls.morgen.net-adminpw@ca-tls.morgen.net:7052 --csr.hosts 'ca-tls.morgen.net'","title":"(1.8) Enrollment of the ca-tls.morgen-net-admin"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#19-register-tls-members-of-the-network","text":"Based on the given network structure we register our network members (peers and orderer) to provide TLS communication between the single nodes. In a further step we are register all CA bootstrap identities for this network against this TLS CA. ```bash","title":"(1.9) Register TLS members of the network"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#register-network-nodes","text":"","title":"register network nodes"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#peer0","text":"fabric-ca-client register -d --id.name peer0.mars.morgen.net --id.secret peer0PW --id.type peer -u https://ca-tls.morgen.net:7052 --csr.hosts 'peer0.mars.morgen.net'","title":"peer0"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#peer1","text":"fabric-ca-client register -d --id.name peer1.mars.morgen.net --id.secret peer1PW --id.type peer -u https://ca-tls.morgen.net:7052 --csr.hosts 'peer1.mars.morgen.net'","title":"peer1"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#orderer","text":"fabric-ca-client register -d --id.name orderer.morgen.net --id.secret ordererPW --id.type orderer -u https://ca-tls.morgen.net:7052 --csr.hosts 'orderer.morgen.net'","title":"orderer"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#register-ca-bootstrap-identiies","text":"","title":"register CA bootstrap identiies"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#register-ca-orderermorgennet-organization-ca-bootstrap-identity-with-the-tls-ca","text":"fabric-ca-client register -d --id.name ca-orderer.morgen.net-admin --id.secret ca-orderer-adminpw -u https://ca-tls.morgen.net:7052 --csr.hosts 'ca-orderer.morgen.net'","title":"register ca-orderer.morgen.net organization CA bootstrap identity with the TLS-CA"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#register-ca-marsmorgennet-organization-ca-bootstrap-identity-with-the-tls-ca","text":"fabric-ca-client register -d --id.name ca-mars.morgen.net-admin --id.secret ca-mars-adminpw -u https://ca-tls.morgen.net:7052 --csr.hosts 'ca-mars.morgen.net' ````","title":"register ca-mars.morgen.net organization CA bootstrap identity with the TLS-CA"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#terms","text":"CSR (certificate signing request) IP SANs (IP subject alternative names)","title":"Terms"},{"location":"administrator/morgen.net/ca-tls.morgen.net/#helper","text":"openssl x509 -noout -text -in file.pem","title":"Helper"},{"location":"administrator/setup/","text":"Setup These steps describes a fabric installation on a DigitalOcean Droplet. Droplet Digital Ocean Droplet, 1 CPU, 2 GB, 50 GB SSD OS, Ubuntu 18.04.3 (LTS) x64 Access via ssh ssh root@64.227.115.55 Perparations The following steps are required to prepare the Droplet. # update the OS apt update && apt upgrade # install some useful helpers apt install tree htop # it's always good the use the right time # so setup the correct timezone timedatectl set-timezone Europe/Vienna # check the time date Secure your installation We secure our installation with ufw. # check if ufw is installed (should be by default) ufw status # set default behavier ufw default deny incoming ufw default allow outgoing # allow only ssh access ufw allow ssh # show added rules ufw show added # enable the firewall ufw enable # check the status again ufw status Install Docker The following steps are required to install docker on the Droplet. # set up the repository sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # set up the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # install docker engine apt-get update apt-get install docker-ce docker-ce-cli containerd.io # check the docker version docker --version Install Docker-Compose # install docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # apply executable permissions to the binary chmod +x /usr/local/bin/docker-compose # check the docker-compose version docker-compose --version Install Go Programming Language Hyperledger Fabric uses the Go Programming Language for many of its components. Go version 1.12.x is required. # add the golang backports ppa add-apt-repository ppa:longsleep/golang-backports # install golang apt-get install golang-1.12 # add the go binary to the path vi ~/.profile PATH=\"$PATH:/usr/lib/go-1.12/bin\" # reload the profile source ~/.profile # check the go version go version First , we must set the environment variable GOPATH to point at the Go workspace containing the downloaded Fabric code base. export GOPATH=$HOME/fabric Second , you should (again, in the appropriate startup file) extend your command search path to include the Go bin directory, such as the following example for bash under Linux: export PATH=$PATH:$GOPATH/bin Install node.js # add PPA from NodeSource curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh # call the install script bash nodesource_setup.sh # install node.js apt-get install -y nodejs # check the version nodejs -v Install Samples, Binaries and Docker Images mkdir fabric cd fabric # install the latest production release from the 1.4.x branch # curl -sSL http://bit.ly/2ysbOFE | bash -s -- <fabric_version> <fabric-ca_version> <thirdparty_version> curl -sSL http://bit.ly/2ysbOFE | bash -s -- 1.4.6 1.4.6 0.4.18 # check downloaded images docker images # add the bin directory to your path vi ~/.profile PATH=/root/fabric/fabric-samples/bin:$PATH Install Fabric-CA binary Install some dependencies on Ubuntu apt install libtool libltdl-dev The following installs both the fabric-ca-server and fabric-ca-client binaries in $GOPATH/bin. We need the fabric-ca-client. # install the binaries go get -u github.com/hyperledger/fabric-ca/cmd/... # check the version fabric-ca-client version Check the installation The build your first network (BYFN) scenario provisions a sample Hyperledger Fabric network consisting of two organizations, each maintaining two peer nodes. It also will deploy a \"Solo\" ordering service by default, though other ordering service implementations are available. To test your installationen we can start the network. cd fabric-samples/first-network # generate network artifacts ./byfn.sh generate # bring up the network ./byfn.sh up # show if some containers are running docker ps # bring down the network ./byfn.sh down","title":"Setup"},{"location":"administrator/setup/#setup","text":"These steps describes a fabric installation on a DigitalOcean Droplet.","title":"Setup"},{"location":"administrator/setup/#droplet","text":"Digital Ocean Droplet, 1 CPU, 2 GB, 50 GB SSD OS, Ubuntu 18.04.3 (LTS) x64","title":"Droplet"},{"location":"administrator/setup/#access-via-ssh","text":"ssh root@64.227.115.55","title":"Access via ssh"},{"location":"administrator/setup/#perparations","text":"The following steps are required to prepare the Droplet. # update the OS apt update && apt upgrade # install some useful helpers apt install tree htop # it's always good the use the right time # so setup the correct timezone timedatectl set-timezone Europe/Vienna # check the time date","title":"Perparations"},{"location":"administrator/setup/#secure-your-installation","text":"We secure our installation with ufw. # check if ufw is installed (should be by default) ufw status # set default behavier ufw default deny incoming ufw default allow outgoing # allow only ssh access ufw allow ssh # show added rules ufw show added # enable the firewall ufw enable # check the status again ufw status","title":"Secure your installation"},{"location":"administrator/setup/#install-docker","text":"The following steps are required to install docker on the Droplet. # set up the repository sudo apt-get install \\ apt-transport-https \\ ca-certificates \\ curl \\ gnupg-agent \\ software-properties-common # add Docker\u2019s official GPG key curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add - # set up the stable repository sudo add-apt-repository \\ \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\ $(lsb_release -cs) \\ stable\" # install docker engine apt-get update apt-get install docker-ce docker-ce-cli containerd.io # check the docker version docker --version","title":"Install Docker"},{"location":"administrator/setup/#install-docker-compose","text":"# install docker-compose curl -L \"https://github.com/docker/compose/releases/download/1.25.5/docker-compose-$(uname -s)-$(uname -m)\" -o /usr/local/bin/docker-compose # apply executable permissions to the binary chmod +x /usr/local/bin/docker-compose # check the docker-compose version docker-compose --version","title":"Install Docker-Compose"},{"location":"administrator/setup/#install-go-programming-language","text":"Hyperledger Fabric uses the Go Programming Language for many of its components. Go version 1.12.x is required. # add the golang backports ppa add-apt-repository ppa:longsleep/golang-backports # install golang apt-get install golang-1.12 # add the go binary to the path vi ~/.profile PATH=\"$PATH:/usr/lib/go-1.12/bin\" # reload the profile source ~/.profile # check the go version go version First , we must set the environment variable GOPATH to point at the Go workspace containing the downloaded Fabric code base. export GOPATH=$HOME/fabric Second , you should (again, in the appropriate startup file) extend your command search path to include the Go bin directory, such as the following example for bash under Linux: export PATH=$PATH:$GOPATH/bin","title":"Install Go Programming Language"},{"location":"administrator/setup/#install-nodejs","text":"# add PPA from NodeSource curl -sL https://deb.nodesource.com/setup_10.x -o nodesource_setup.sh # call the install script bash nodesource_setup.sh # install node.js apt-get install -y nodejs # check the version nodejs -v","title":"Install node.js"},{"location":"administrator/setup/#install-samples-binaries-and-docker-images","text":"mkdir fabric cd fabric # install the latest production release from the 1.4.x branch # curl -sSL http://bit.ly/2ysbOFE | bash -s -- <fabric_version> <fabric-ca_version> <thirdparty_version> curl -sSL http://bit.ly/2ysbOFE | bash -s -- 1.4.6 1.4.6 0.4.18 # check downloaded images docker images # add the bin directory to your path vi ~/.profile PATH=/root/fabric/fabric-samples/bin:$PATH","title":"Install Samples, Binaries and Docker Images"},{"location":"administrator/setup/#install-fabric-ca-binary","text":"Install some dependencies on Ubuntu apt install libtool libltdl-dev The following installs both the fabric-ca-server and fabric-ca-client binaries in $GOPATH/bin. We need the fabric-ca-client. # install the binaries go get -u github.com/hyperledger/fabric-ca/cmd/... # check the version fabric-ca-client version","title":"Install Fabric-CA binary"},{"location":"administrator/setup/#check-the-installation","text":"The build your first network (BYFN) scenario provisions a sample Hyperledger Fabric network consisting of two organizations, each maintaining two peer nodes. It also will deploy a \"Solo\" ordering service by default, though other ordering service implementations are available. To test your installationen we can start the network. cd fabric-samples/first-network # generate network artifacts ./byfn.sh generate # bring up the network ./byfn.sh up # show if some containers are running docker ps # bring down the network ./byfn.sh down","title":"Check the installation"},{"location":"administrator/setup/overviewByfn/","text":"First try - Build Your First Network (BYFN) The build your first network (BYFN) scenario provisions a sample Hyperledger Fabric network consisting of two organizations, each maintaining two peer nodes. It also will deploy a \u201cSolo\u201d ordering service by default, though other ordering service implementations are available. Usage: byfn.sh <mode> [-c <channel name>] [-t <timeout>] [-d <delay>] [-f <docker-compose-file>] [-s <dbtype>] [-l <language>] [-o <consensus-type>] [-i <imagetag>] [-v] <mode> - one of 'up', 'down', 'restart', 'generate' or 'upgrade' - 'up' - bring up the network with docker-compose up - 'down' - clear the network with docker-compose down - 'restart' - restart the network - 'generate' - generate required certificates and genesis block - 'upgrade' - upgrade the network from version 1.3.x to 1.4.0 -c <channel name> - channel name to use (defaults to \\\"mychannel\\\") -t <timeout> - CLI timeout duration in seconds (defaults to 10) -d <delay> - delay duration in seconds (defaults to 3) -f <docker-compose-file> - specify which docker-compose file use (defaults to docker-compose-cli.yaml) -s <dbtype> - the database backend to use: goleveldb (default) or couchdb -l <language> - the chaincode language: golang (default), node, or java -o <consensus-type> - the consensus-type of the ordering service: solo (default), kafka, or etcdraft -i <imagetag> - the tag to be used to launch the network (defaults to \\\"latest\\\") -v - verbose mode byfn.sh -h (print this message) Typically, one would first generate the required certificates and genesis block, then bring up the network. e.g.: byfn.sh generate -c mychannel byfn.sh up -c mychannel -s couchdb byfn.sh up -c mychannel -s couchdb -i 1.4.0 byfn.sh up -l node byfn.sh down -c mychannel byfn.sh upgrade -c mychannel Taking all defaults: byfn.sh generate byfn.sh up byfn.sh down Start a basic network configuration cd $HOME/fabric # create a new tmux session with 2 panels tmux new -s fabric CTRL + b \u201c # switch to the first panel CTRL + q 0 # switch into the source directory cd fabric-samples/first-network # generate network artifacts ./byfn.sh generate -c channel1 # bring up the network with channel 1 ./byfn.sh up -c channel1 # bring up the network with channel 1 and couchdb ./byfn.sh up -c channel1 -s couchdb # show if some containers are running docker ps # play with docker ps --format docker ps --format '{{.ID}}\\t {{.Names}}\\t\\t {{.Ports}}' # leave tmux session CTRL + b d # bring down the network ./byfn.sh down The result is a network that consists of the following components and can be represented graphically as follows. Query the Ledger # switch to the target panel CTRL + b q 1 # jump into the cli container docker exec -it cli bash # do you first blockchain query export CHANNEL_NAME=channel1 peer chaincode query -C $CHANNEL_NAME -n mycc -c '{\"Args\":[\"query\",\"a\"]}' # get some information about your current situation printenv | grep CORE # we will see the following environment vars CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_ADDRESS=peer0.org1.example.com:7051 CORE_PEER_ID=cli CORE_PEER_TLS_ENABLED=true CORE_PEER_TLS_KEY_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key CORE_PEER_TLS_CERT_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt CORE_PEER_TLS_ROOTCERT_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/../peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock How do I see these transactions? # we switch to panel 0 CTRL + b q 0 # we start the logging for the chaincode container docker logs -f dev-peer0.org1.example.com-mycc-1.0 Aval = 90, Bval = 210 # we start the logging for the chaincode container docker logs -f dev-peer0.org2.example.com-mycc-1.0 Invoke the ledger # we set some environment vars as placeholders to reduce the cli command export TEST_CHANNEL_NAME=channel1 export TEST_CA_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem export TEST_TLS_ROOT_CERT_ORG1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt export TEST_TLS_ROOT_CERT_ORG2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # we set some environment vars as placeholders to reduce the cli command printenv | grep TEST peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}' Change the cli view to query Org2 # switch to peer0.org2.example.com docker exec cli -it bash # we have to change the following env vars from the cli container CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_ADDRESS=peer0.org2.example.com:9051 CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # check your settings printenv | grep CORE # now we can query the Org2 ledger on peer0.org2.example.com peer chaincode query -C $TEST_CHANNEL_NAME -n mycc -c '{\"Args\":[\"query\",\"a\"]}'","title":"First try - Build Your First Network (BYFN)"},{"location":"administrator/setup/overviewByfn/#first-try-build-your-first-network-byfn","text":"The build your first network (BYFN) scenario provisions a sample Hyperledger Fabric network consisting of two organizations, each maintaining two peer nodes. It also will deploy a \u201cSolo\u201d ordering service by default, though other ordering service implementations are available. Usage: byfn.sh <mode> [-c <channel name>] [-t <timeout>] [-d <delay>] [-f <docker-compose-file>] [-s <dbtype>] [-l <language>] [-o <consensus-type>] [-i <imagetag>] [-v] <mode> - one of 'up', 'down', 'restart', 'generate' or 'upgrade' - 'up' - bring up the network with docker-compose up - 'down' - clear the network with docker-compose down - 'restart' - restart the network - 'generate' - generate required certificates and genesis block - 'upgrade' - upgrade the network from version 1.3.x to 1.4.0 -c <channel name> - channel name to use (defaults to \\\"mychannel\\\") -t <timeout> - CLI timeout duration in seconds (defaults to 10) -d <delay> - delay duration in seconds (defaults to 3) -f <docker-compose-file> - specify which docker-compose file use (defaults to docker-compose-cli.yaml) -s <dbtype> - the database backend to use: goleveldb (default) or couchdb -l <language> - the chaincode language: golang (default), node, or java -o <consensus-type> - the consensus-type of the ordering service: solo (default), kafka, or etcdraft -i <imagetag> - the tag to be used to launch the network (defaults to \\\"latest\\\") -v - verbose mode byfn.sh -h (print this message) Typically, one would first generate the required certificates and genesis block, then bring up the network. e.g.: byfn.sh generate -c mychannel byfn.sh up -c mychannel -s couchdb byfn.sh up -c mychannel -s couchdb -i 1.4.0 byfn.sh up -l node byfn.sh down -c mychannel byfn.sh upgrade -c mychannel Taking all defaults: byfn.sh generate byfn.sh up byfn.sh down","title":"First try - Build Your First Network (BYFN)"},{"location":"administrator/setup/overviewByfn/#start-a-basic-network-configuration","text":"cd $HOME/fabric # create a new tmux session with 2 panels tmux new -s fabric CTRL + b \u201c # switch to the first panel CTRL + q 0 # switch into the source directory cd fabric-samples/first-network # generate network artifacts ./byfn.sh generate -c channel1 # bring up the network with channel 1 ./byfn.sh up -c channel1 # bring up the network with channel 1 and couchdb ./byfn.sh up -c channel1 -s couchdb # show if some containers are running docker ps # play with docker ps --format docker ps --format '{{.ID}}\\t {{.Names}}\\t\\t {{.Ports}}' # leave tmux session CTRL + b d # bring down the network ./byfn.sh down The result is a network that consists of the following components and can be represented graphically as follows.","title":"Start a basic network configuration"},{"location":"administrator/setup/overviewByfn/#query-the-ledger","text":"# switch to the target panel CTRL + b q 1 # jump into the cli container docker exec -it cli bash # do you first blockchain query export CHANNEL_NAME=channel1 peer chaincode query -C $CHANNEL_NAME -n mycc -c '{\"Args\":[\"query\",\"a\"]}' # get some information about your current situation printenv | grep CORE # we will see the following environment vars CORE_PEER_LOCALMSPID=Org1MSP CORE_PEER_ADDRESS=peer0.org1.example.com:7051 CORE_PEER_ID=cli CORE_PEER_TLS_ENABLED=true CORE_PEER_TLS_KEY_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.key CORE_PEER_TLS_CERT_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/server.crt CORE_PEER_TLS_ROOTCERT_FILE=/opt/../peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt CORE_PEER_MSPCONFIGPATH=/opt/../peer/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp CORE_VM_ENDPOINT=unix:///host/var/run/docker.sock","title":"Query the Ledger"},{"location":"administrator/setup/overviewByfn/#how-do-i-see-these-transactions","text":"# we switch to panel 0 CTRL + b q 0 # we start the logging for the chaincode container docker logs -f dev-peer0.org1.example.com-mycc-1.0 Aval = 90, Bval = 210 # we start the logging for the chaincode container docker logs -f dev-peer0.org2.example.com-mycc-1.0","title":"How do I see these transactions?"},{"location":"administrator/setup/overviewByfn/#invoke-the-ledger","text":"# we set some environment vars as placeholders to reduce the cli command export TEST_CHANNEL_NAME=channel1 export TEST_CA_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem export TEST_TLS_ROOT_CERT_ORG1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt export TEST_TLS_ROOT_CERT_ORG2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # we set some environment vars as placeholders to reduce the cli command printenv | grep TEST peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n mycc --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"invoke\",\"a\",\"b\",\"10\"]}'","title":"Invoke the ledger"},{"location":"administrator/setup/overviewByfn/#change-the-cli-view-to-query-org2","text":"# switch to peer0.org2.example.com docker exec cli -it bash # we have to change the following env vars from the cli container CORE_PEER_LOCALMSPID=Org2MSP CORE_PEER_ADDRESS=peer0.org2.example.com:9051 CORE_PEER_TLS_KEY_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.key CORE_PEER_TLS_CERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/server.crt CORE_PEER_MSPCONFIGPATH=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp CORE_PEER_TLS_ROOTCERT_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # check your settings printenv | grep CORE # now we can query the Org2 ledger on peer0.org2.example.com peer chaincode query -C $TEST_CHANNEL_NAME -n mycc -c '{\"Args\":[\"query\",\"a\"]}'","title":"Change the cli view to query Org2"},{"location":"developer/","text":"Developer learning path The following is a frist approch to develop a learning path for a Hyperledger Fabric Developer. Install your development environment Installation of HLF First try - Build Four First Network byfn Client Application Development General steps to develop a Blockchain Application How to use the Hyperledger Fabric Node SDK Listen to HLF events with node.js Chaincode Development Chaincode Development Environment (chaincode-dev-docker) How to run byfn as testing network Install/Upgrade Chaincode Chaincode Basics Using CouchDB Slides Hyperledger Fabric (HLF) Github How to listen events with fabric-sdk-node 1.4.x HLF chaincode examples How to access HLF ledger data with Node.js How to access HLF ledger data with Node.js, example_02 chaincode","title":"Developer Learning Path"},{"location":"developer/#developer-learning-path","text":"The following is a frist approch to develop a learning path for a Hyperledger Fabric Developer.","title":"Developer learning path"},{"location":"developer/#install-your-development-environment","text":"Installation of HLF First try - Build Four First Network byfn","title":"Install your development environment"},{"location":"developer/#client-application-development","text":"General steps to develop a Blockchain Application How to use the Hyperledger Fabric Node SDK Listen to HLF events with node.js","title":"Client Application Development"},{"location":"developer/#chaincode-development","text":"Chaincode Development Environment (chaincode-dev-docker) How to run byfn as testing network Install/Upgrade Chaincode","title":"Chaincode Development"},{"location":"developer/#chaincode-basics","text":"","title":"Chaincode Basics"},{"location":"developer/#using-couchdb","text":"","title":"Using CouchDB"},{"location":"developer/#slides","text":"Hyperledger Fabric (HLF)","title":"Slides"},{"location":"developer/#github","text":"How to listen events with fabric-sdk-node 1.4.x HLF chaincode examples How to access HLF ledger data with Node.js How to access HLF ledger data with Node.js, example_02 chaincode","title":"Github"},{"location":"developer/byfnOwnChaincode/","text":"How to use the byfn network to run and test your own chaincode? To do so, we create the following two scripts in a new directory. The first script is to start the network and install our custom chaincode. The second one is used to stop the network. # create a new directory under the fabric-samples cd $HOME/fabric/fabric-samples mkdir rb-test-network && cd rb-test-network touch start.sh stop.sh addCC.sh . \u251c\u2500\u2500 addCC.sh \u251c\u2500\u2500 start.sh \u2514\u2500\u2500 stop.sh The start.sh script is used to start the network, install the chaincode on peer0 for both organizations. The stop.sh script is used to stop and clean up the network. The addCC.sh script ist used to add an further chaincode to the running network. Add the following to the start.sh script. #!/bin/bash # Exit on first error set -e CC_CHANNEL_NAME=channel1 CC_NAME=sacc CC_SRC_PATH=github.com/chaincode/sacc startNetworkWithChaincode() { cd ../first-network echo y | ./byfn.sh down echo y | ./byfn.sh up -a -n -c $CC_CHANNEL_NAME CONFIG_ROOT=/opt/gopath/src/github.com/hyperledger/fabric/peer ORG1_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp ORG1_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt ORG2_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp ORG2_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt ORDERER_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem set -x echo \"Installing smart contract: $CC_NAME on peer0.org1.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Installing smart contract: $CC_NAME on peer0.org2.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org2MSP \\ -e CORE_PEER_ADDRESS=peer0.org2.example.com:9051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Instantiating smart contract: $CC_NAME on $CC_CHANNEL_NAME\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ cli \\ peer chaincode instantiate \\ -o orderer.example.com:7050 \\ -C $CC_CHANNEL_NAME \\ -n $CC_NAME \\ -v 1.0 \\ -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' \\ -P \"AND('Org1MSP.member','Org2MSP.member')\" \\ --tls \\ --cafile ${ORDERER_TLS_ROOTCERT_FILE} \\ --peerAddresses peer0.org1.example.com:7051 \\ --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} echo \"Waiting for instantiation request to be committed ...\" sleep 10 echo \"Ready to use the network ...\" } # start the network with a custom chaincode startNetworkWithChaincode Add the following to the stop.sh script. #!/bin/bash # Exit on first error set -e # bring down the network and clear all relevant data without the crypto artifacts cd ../first-network echo y | ./byfn.sh down Add the following to the addCC.sh script. #!/bin/bash # Exit on first error set -e CC_CHANNEL_NAME=channel1 CC_NAME=sacc3 CC_SRC_PATH=github.com/chaincode/sacc3 addNewChaincode() { cd ../first-network CONFIG_ROOT=/opt/gopath/src/github.com/hyperledger/fabric/peer ORG1_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp ORG1_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt ORG2_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp ORG2_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt ORDERER_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem set -x echo \"Installing smart contract: $CC_NAME on peer0.org1.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Installing smart contract: $CC_NAME on peer0.org2.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org2MSP \\ -e CORE_PEER_ADDRESS=peer0.org2.example.com:9051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Instantiating smart contract: $CC_NAME on $CC_CHANNEL_NAME\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ cli \\ peer chaincode instantiate \\ -o orderer.example.com:7050 \\ -C $CC_CHANNEL_NAME \\ -n $CC_NAME \\ -v 1.0 \\ -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' \\ -P \"AND('Org1MSP.member','Org2MSP.member')\" \\ --tls \\ --cafile ${ORDERER_TLS_ROOTCERT_FILE} \\ --peerAddresses peer0.org1.example.com:7051 \\ --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} echo \"Waiting for instantiation request to be committed ...\" sleep 10 echo \"Ready to use the network ...\" } ## add new chaincode to running network addNewChaincode Use this chaincode # Start your test network for cli queries docker exec -it cli bash # we set some environment vars as placeholders to reduce the cli command export TEST_CHANNEL_NAME=channel1 export TEST_CC_NAME=sacc export TEST_CA_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem export TEST_TLS_ROOT_CERT_ORG1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt export TEST_TLS_ROOT_CERT_ORG2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # show your variables printenv | grep TEST # query the ledger peer chaincode query -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME -c '{\"Args\":[\"query\",\"msg\"]}' # store something to the ledger peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"set\",\"msg2\",\"Hello fabric\"]}' peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"set\",\"msg2\",\"Hello fabric3\"]}'","title":"How to use the byfn network to run and test your own chaincode?"},{"location":"developer/byfnOwnChaincode/#how-to-use-the-byfn-network-to-run-and-test-your-own-chaincode","text":"To do so, we create the following two scripts in a new directory. The first script is to start the network and install our custom chaincode. The second one is used to stop the network. # create a new directory under the fabric-samples cd $HOME/fabric/fabric-samples mkdir rb-test-network && cd rb-test-network touch start.sh stop.sh addCC.sh . \u251c\u2500\u2500 addCC.sh \u251c\u2500\u2500 start.sh \u2514\u2500\u2500 stop.sh The start.sh script is used to start the network, install the chaincode on peer0 for both organizations. The stop.sh script is used to stop and clean up the network. The addCC.sh script ist used to add an further chaincode to the running network. Add the following to the start.sh script. #!/bin/bash # Exit on first error set -e CC_CHANNEL_NAME=channel1 CC_NAME=sacc CC_SRC_PATH=github.com/chaincode/sacc startNetworkWithChaincode() { cd ../first-network echo y | ./byfn.sh down echo y | ./byfn.sh up -a -n -c $CC_CHANNEL_NAME CONFIG_ROOT=/opt/gopath/src/github.com/hyperledger/fabric/peer ORG1_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp ORG1_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt ORG2_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp ORG2_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt ORDERER_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem set -x echo \"Installing smart contract: $CC_NAME on peer0.org1.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Installing smart contract: $CC_NAME on peer0.org2.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org2MSP \\ -e CORE_PEER_ADDRESS=peer0.org2.example.com:9051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Instantiating smart contract: $CC_NAME on $CC_CHANNEL_NAME\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ cli \\ peer chaincode instantiate \\ -o orderer.example.com:7050 \\ -C $CC_CHANNEL_NAME \\ -n $CC_NAME \\ -v 1.0 \\ -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' \\ -P \"AND('Org1MSP.member','Org2MSP.member')\" \\ --tls \\ --cafile ${ORDERER_TLS_ROOTCERT_FILE} \\ --peerAddresses peer0.org1.example.com:7051 \\ --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} echo \"Waiting for instantiation request to be committed ...\" sleep 10 echo \"Ready to use the network ...\" } # start the network with a custom chaincode startNetworkWithChaincode Add the following to the stop.sh script. #!/bin/bash # Exit on first error set -e # bring down the network and clear all relevant data without the crypto artifacts cd ../first-network echo y | ./byfn.sh down Add the following to the addCC.sh script. #!/bin/bash # Exit on first error set -e CC_CHANNEL_NAME=channel1 CC_NAME=sacc3 CC_SRC_PATH=github.com/chaincode/sacc3 addNewChaincode() { cd ../first-network CONFIG_ROOT=/opt/gopath/src/github.com/hyperledger/fabric/peer ORG1_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/users/Admin@org1.example.com/msp ORG1_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt ORG2_MSPCONFIGPATH=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/users/Admin@org2.example.com/msp ORG2_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt ORDERER_TLS_ROOTCERT_FILE=${CONFIG_ROOT}/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem set -x echo \"Installing smart contract: $CC_NAME on peer0.org1.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_ADDRESS=peer0.org1.example.com:7051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG1_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Installing smart contract: $CC_NAME on peer0.org2.example.com\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org2MSP \\ -e CORE_PEER_ADDRESS=peer0.org2.example.com:9051 \\ -e CORE_PEER_MSPCONFIGPATH=${ORG2_MSPCONFIGPATH} \\ -e CORE_PEER_TLS_ROOTCERT_FILE=${ORG2_TLS_ROOTCERT_FILE} \\ cli \\ peer chaincode install \\ -n \"$CC_NAME\" \\ -v 1.0 \\ -p \"$CC_SRC_PATH\" echo \"Instantiating smart contract: $CC_NAME on $CC_CHANNEL_NAME\" docker exec \\ -e CORE_PEER_LOCALMSPID=Org1MSP \\ -e CORE_PEER_MSPCONFIGPATH=${ORG1_MSPCONFIGPATH} \\ cli \\ peer chaincode instantiate \\ -o orderer.example.com:7050 \\ -C $CC_CHANNEL_NAME \\ -n $CC_NAME \\ -v 1.0 \\ -c '{\"Args\":[\"msg\",\"hello blockchain\"]}' \\ -P \"AND('Org1MSP.member','Org2MSP.member')\" \\ --tls \\ --cafile ${ORDERER_TLS_ROOTCERT_FILE} \\ --peerAddresses peer0.org1.example.com:7051 \\ --tlsRootCertFiles ${ORG1_TLS_ROOTCERT_FILE} echo \"Waiting for instantiation request to be committed ...\" sleep 10 echo \"Ready to use the network ...\" } ## add new chaincode to running network addNewChaincode","title":"How to use the byfn network to run and test your own chaincode?"},{"location":"developer/byfnOwnChaincode/#use-this-chaincode","text":"# Start your test network for cli queries docker exec -it cli bash # we set some environment vars as placeholders to reduce the cli command export TEST_CHANNEL_NAME=channel1 export TEST_CC_NAME=sacc export TEST_CA_FILE=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/ordererOrganizations/example.com/orderers/orderer.example.com/msp/tlscacerts/tlsca.example.com-cert.pem export TEST_TLS_ROOT_CERT_ORG1=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org1.example.com/peers/peer0.org1.example.com/tls/ca.crt export TEST_TLS_ROOT_CERT_ORG2=/opt/gopath/src/github.com/hyperledger/fabric/peer/crypto/peerOrganizations/org2.example.com/peers/peer0.org2.example.com/tls/ca.crt # show your variables printenv | grep TEST # query the ledger peer chaincode query -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME -c '{\"Args\":[\"query\",\"msg\"]}' # store something to the ledger peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"set\",\"msg2\",\"Hello fabric\"]}' peer chaincode invoke -o orderer.example.com:7050 --tls true --cafile $TEST_CA_FILE -C $TEST_CHANNEL_NAME -n $TEST_CC_NAME --peerAddresses peer0.org1.example.com:7051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG1 --peerAddresses peer0.org2.example.com:9051 --tlsRootCertFiles $TEST_TLS_ROOT_CERT_ORG2 -c '{\"Args\":[\"set\",\"msg2\",\"Hello fabric3\"]}'","title":"Use this chaincode"},{"location":"developer/chaincodeDevEnv/","text":"Chaincode Development Environment (chaincode-docker-devmode) Below you will find a chaincode development environment with tmux. For more commands see the cheatsheet . Create a tmux session To create a named session, run the tmux command with the following arguments: tmux new -s fabric Create a split view Split pane horizontally CTRL + b \" Split pane vertically CTRL + b % Now you can see two panels. Now we switch to the second panel. # jump to second panel (watch the numbers after q) CTRL + b q 1 # jump the first panel if you want CTRL + b q 0 Split the second panel horizontally again. # split the screen again CTRL + b \" Now you should have one session with three panels. Spread the panels evenly. CTRL + b [space] Start the environment Switch to panel 0. Make sure you are into the directory fabric-samples/chaincode-dev-docker. CTRL + b q 0 # start the network docker-compose -f docker-compose-simple.yaml up Notice: The docker-compose-simple.yaml file does not include a couchDb container. If you are going to use couchDb releated topics with this environment you have to modify the docker-compose file. Add the following to your docker-compose file. couchdb: container_name: couchdb image: hyperledger/fabric-couchdb:0.4.18 # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password # for CouchDB. This will prevent CouchDB from operating in an \"Admin Party\" mode. environment: - COUCHDB_USER=admin - COUCHDB_PASSWORD=password # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service, # for example map it to utilize Fauxton User Interface in dev environments. ports: - \"5984:5984\" And under the peer service in this docker-compose file add the following and start your network again. - CORE_LEDGER_STATE_STATEDATABASE=CouchDB - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=password - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984 Build the chaincode Switch to the second region with the command. CTRL + b q 1 To build the chaincode you have to check the $GOPATH environment variable and you should have cloned the fabric git repo with the proper release. In my case I use the release 1.4. Do this for only for the first time. export GOPATH=/root/fabric cd /root/fabric mkdir -p src/github.com/hyperledger cd src/github.com/hyperledger git clone -b release-1.4 https://github.com/hyperledger/fabric.git To build the chaincode you have to switch into the chaincode container. # switch into the chaincode container docker exec -it chaincode bash # switch into the chaincode folder cd chaincode/sacc # build the chaincode go build # check the result # you should see the go binary file. ls -l Now you can run the chaincode: CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=mycc:0 ./sacc Use the chaincode Switch to panel three. CTRL + b q 2 Switch into the cli container to use the chaincode. docker exec -it cli bash cd /opt/gopath/src Install and instantiate the chaincode. peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0 peer chaincode instantiate -n mycc -v 0 -c '{\"Args\":[\"a\",\"10\"]}' -C myc Invoke the chaincode. peer chaincode invoke -n mycc -c '{\"Args\":[\"set\", \"a\", \"20\"]}' -C myc Query the chaincode. peer chaincode query -n mycc -c '{\"Args\":[\"query\",\"a\"]}' -C myc Leave the tmux session To leave the current screen session detach from it. CTRL + b d List all tmux sessions tmux ls Rename the tmux session tmux rename-session -t [oldname] [newname] Reattach to the tmux session To resume your screen session use the following command. tmux attach -t 0 Kill the tmux session # shows existing screen session - you need the name of the session tmux -ls # kill the session per name tmux kill-session -a -t mysession Scroll inside panel (Mac version) To scroll inside of a panel use the following command. CTRL + b fn + up || down","title":"Chaincode Development Environment"},{"location":"developer/chaincodeDevEnv/#chaincode-development-environment","text":"(chaincode-docker-devmode) Below you will find a chaincode development environment with tmux. For more commands see the cheatsheet .","title":"Chaincode Development Environment"},{"location":"developer/chaincodeDevEnv/#create-a-tmux-session","text":"To create a named session, run the tmux command with the following arguments: tmux new -s fabric","title":"Create a tmux session"},{"location":"developer/chaincodeDevEnv/#create-a-split-view","text":"Split pane horizontally CTRL + b \" Split pane vertically CTRL + b % Now you can see two panels. Now we switch to the second panel. # jump to second panel (watch the numbers after q) CTRL + b q 1 # jump the first panel if you want CTRL + b q 0 Split the second panel horizontally again. # split the screen again CTRL + b \" Now you should have one session with three panels. Spread the panels evenly. CTRL + b [space]","title":"Create a split view"},{"location":"developer/chaincodeDevEnv/#start-the-environment","text":"Switch to panel 0. Make sure you are into the directory fabric-samples/chaincode-dev-docker. CTRL + b q 0 # start the network docker-compose -f docker-compose-simple.yaml up Notice: The docker-compose-simple.yaml file does not include a couchDb container. If you are going to use couchDb releated topics with this environment you have to modify the docker-compose file. Add the following to your docker-compose file. couchdb: container_name: couchdb image: hyperledger/fabric-couchdb:0.4.18 # Populate the COUCHDB_USER and COUCHDB_PASSWORD to set an admin user and password # for CouchDB. This will prevent CouchDB from operating in an \"Admin Party\" mode. environment: - COUCHDB_USER=admin - COUCHDB_PASSWORD=password # Comment/Uncomment the port mapping if you want to hide/expose the CouchDB service, # for example map it to utilize Fauxton User Interface in dev environments. ports: - \"5984:5984\" And under the peer service in this docker-compose file add the following and start your network again. - CORE_LEDGER_STATE_STATEDATABASE=CouchDB - CORE_LEDGER_STATE_COUCHDBCONFIG_USERNAME=admin - CORE_LEDGER_STATE_COUCHDBCONFIG_PASSWORD=password - CORE_LEDGER_STATE_COUCHDBCONFIG_COUCHDBADDRESS=couchdb:5984","title":"Start the environment"},{"location":"developer/chaincodeDevEnv/#build-the-chaincode","text":"Switch to the second region with the command. CTRL + b q 1 To build the chaincode you have to check the $GOPATH environment variable and you should have cloned the fabric git repo with the proper release. In my case I use the release 1.4. Do this for only for the first time. export GOPATH=/root/fabric cd /root/fabric mkdir -p src/github.com/hyperledger cd src/github.com/hyperledger git clone -b release-1.4 https://github.com/hyperledger/fabric.git To build the chaincode you have to switch into the chaincode container. # switch into the chaincode container docker exec -it chaincode bash # switch into the chaincode folder cd chaincode/sacc # build the chaincode go build # check the result # you should see the go binary file. ls -l Now you can run the chaincode: CORE_PEER_ADDRESS=peer:7052 CORE_CHAINCODE_ID_NAME=mycc:0 ./sacc","title":"Build the chaincode"},{"location":"developer/chaincodeDevEnv/#use-the-chaincode","text":"Switch to panel three. CTRL + b q 2 Switch into the cli container to use the chaincode. docker exec -it cli bash cd /opt/gopath/src Install and instantiate the chaincode. peer chaincode install -p chaincodedev/chaincode/sacc -n mycc -v 0 peer chaincode instantiate -n mycc -v 0 -c '{\"Args\":[\"a\",\"10\"]}' -C myc Invoke the chaincode. peer chaincode invoke -n mycc -c '{\"Args\":[\"set\", \"a\", \"20\"]}' -C myc Query the chaincode. peer chaincode query -n mycc -c '{\"Args\":[\"query\",\"a\"]}' -C myc","title":"Use the chaincode"},{"location":"developer/chaincodeDevEnv/#leave-the-tmux-session","text":"To leave the current screen session detach from it. CTRL + b d","title":"Leave the tmux session"},{"location":"developer/chaincodeDevEnv/#list-all-tmux-sessions","text":"tmux ls","title":"List all tmux sessions"},{"location":"developer/chaincodeDevEnv/#rename-the-tmux-session","text":"tmux rename-session -t [oldname] [newname]","title":"Rename the tmux session"},{"location":"developer/chaincodeDevEnv/#reattach-to-the-tmux-session","text":"To resume your screen session use the following command. tmux attach -t 0","title":"Reattach to the tmux session"},{"location":"developer/chaincodeDevEnv/#kill-the-tmux-session","text":"# shows existing screen session - you need the name of the session tmux -ls # kill the session per name tmux kill-session -a -t mysession","title":"Kill the tmux session"},{"location":"developer/chaincodeDevEnv/#scroll-inside-panel-mac-version","text":"To scroll inside of a panel use the following command. CTRL + b fn + up || down","title":"Scroll inside panel (Mac version)"},{"location":"developer/developAnApplication/","text":"Develop a Blockchain Application Hyperledger Fabric SDK for Node.js 1.4 To develop a blockchain application in the field of Hyperleder Fabric these are the required steps regarding the offical hyperledger fabric documentation. The application flow to invoke a smart contract How an application uses a wallet and identity How an application connects using a gateway How to access a particular network How to construct a transaction request How to submit a transaction How to process a transaction response The Application Flow An application has to follow six basic steps to submit a transaction: Select an identity from a wallet Connect to a gateway Access the desired network Construct a transaction request for a smart contract Submit the transaction to the network Process the response","title":"Develop a Blockchain Application"},{"location":"developer/developAnApplication/#develop-a-blockchain-application","text":"Hyperledger Fabric SDK for Node.js 1.4 To develop a blockchain application in the field of Hyperleder Fabric these are the required steps regarding the offical hyperledger fabric documentation. The application flow to invoke a smart contract How an application uses a wallet and identity How an application connects using a gateway How to access a particular network How to construct a transaction request How to submit a transaction How to process a transaction response","title":"Develop a Blockchain Application"},{"location":"developer/developAnApplication/#the-application-flow","text":"An application has to follow six basic steps to submit a transaction: Select an identity from a wallet Connect to a gateway Access the desired network Construct a transaction request for a smart contract Submit the transaction to the network Process the response","title":"The Application Flow"},{"location":"developer/eventListening/","text":"Listen to HLF events with node.js This article describes the different ways to listen to events emitted by a network using the fabric-sdk-node module release 1.4. In the course of this article we are going to develop a node.js application which deals with the different event types. Overview Basicly there are three event types that can be subscribed to: Contract events ; Those emitted explicitly by the chaincode developer within a transaction. Transaction (Commit) events ; Those emitted automatically when a transaction is committed after an invoke. Block events ; Those emitted automatically when a block is committed. Requirements To follow this article you need two things: 1. A running hyperledger-fabric network ready to install some chaincode and 2. a proper node.js installation. Since we are building a node.js application, we need a few preparation steps. First we set up the project. mkdir app03 && cd app03 npm init Add the following dependencies to your packages.json file. \"dependencies\": { \"express\": \"^4.17.1\", \"fabric-ca-client\": \"^1.4.8\", \"fabric-network\": \"^1.4.8\" } Install needed dependencies. npm install Set up you connection profile according to you network. You can find here a demo connecting profile. Examples Query the ledger ; As a starter we can test your node.js application if it is running. Listen to chaincode events To implement a contract event we have to modify the chaincode to emit an event. After that we can listen to this event within the node.js application. Listen to block events If a new block is created we can listen to this event. Listen to transaction events We can wait until a transaction is successfully submitted to the network.","title":"Listen to HLF events with node.js"},{"location":"developer/eventListening/#listen-to-hlf-events-with-nodejs","text":"This article describes the different ways to listen to events emitted by a network using the fabric-sdk-node module release 1.4. In the course of this article we are going to develop a node.js application which deals with the different event types.","title":"Listen to HLF events with node.js"},{"location":"developer/eventListening/#overview","text":"Basicly there are three event types that can be subscribed to: Contract events ; Those emitted explicitly by the chaincode developer within a transaction. Transaction (Commit) events ; Those emitted automatically when a transaction is committed after an invoke. Block events ; Those emitted automatically when a block is committed.","title":"Overview"},{"location":"developer/eventListening/#requirements","text":"To follow this article you need two things: 1. A running hyperledger-fabric network ready to install some chaincode and 2. a proper node.js installation. Since we are building a node.js application, we need a few preparation steps. First we set up the project. mkdir app03 && cd app03 npm init Add the following dependencies to your packages.json file. \"dependencies\": { \"express\": \"^4.17.1\", \"fabric-ca-client\": \"^1.4.8\", \"fabric-network\": \"^1.4.8\" } Install needed dependencies. npm install Set up you connection profile according to you network. You can find here a demo connecting profile.","title":"Requirements"},{"location":"developer/eventListening/#examples","text":"Query the ledger ; As a starter we can test your node.js application if it is running. Listen to chaincode events To implement a contract event we have to modify the chaincode to emit an event. After that we can listen to this event within the node.js application. Listen to block events If a new block is created we can listen to this event. Listen to transaction events We can wait until a transaction is successfully submitted to the network.","title":"Examples"},{"location":"developer/installUpgradeChaincode/","text":"Install chaincode peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed Update chaincode To upgrade an existing chaincode you have to do two steps: Install the new chaincode with the same name under a new verions no Upgrade the chaincode After modification of the chaincode we have to install the chaincode under a new version first. peer chaincode install -n sacc4 -v 1.1 -p github.com/hyperledger/fabric-samples/chaincode/sacc4/ After installation of the new chaincode version we can fire up the upgrade of the chaincode. But you have to be aware about the init function of the chaincode! peer chaincode upgrade -o orderer.morgen.net:7050 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem -C channel1 -n sacc4 -v 1.1 -c '{\"Args\":[\"msg\",\"upgrade\"]}'","title":"Install chaincode"},{"location":"developer/installUpgradeChaincode/#install-chaincode","text":"peer chaincode install -n sacc -v 1.0 -p github.com/hyperledger/fabric-samples/chaincode/sacc/ Check if the chaincode is installed. peer chaincode list --installed","title":"Install chaincode"},{"location":"developer/installUpgradeChaincode/#update-chaincode","text":"To upgrade an existing chaincode you have to do two steps: Install the new chaincode with the same name under a new verions no Upgrade the chaincode After modification of the chaincode we have to install the chaincode under a new version first. peer chaincode install -n sacc4 -v 1.1 -p github.com/hyperledger/fabric-samples/chaincode/sacc4/ After installation of the new chaincode version we can fire up the upgrade of the chaincode. But you have to be aware about the init function of the chaincode! peer chaincode upgrade -o orderer.morgen.net:7050 --tls --cafile /tmp/hyperledger/mars.morgen.net/peers/peer0/tls-msp/tlscacerts/tls-ca-tls-morgen-net-7052.pem -C channel1 -n sacc4 -v 1.1 -c '{\"Args\":[\"msg\",\"upgrade\"]}'","title":"Update chaincode"},{"location":"developer/nodeSdk/","text":"How to use the Hyperledger Fabric Node SDK To explain how you can use the Hyperledger Fabric Node SDK we can study the following picture to get an conceptual overview. In the picture below you can see the general building blocks of a web application which is interacting with a fabric network. (1) General requirements For this example, we assume the following general requirements: a running Hyperledger Fabric network, version 1.4.6 installed and instantiated chaincode The set up of a fabric network and the installation of chaincode is out of the scope of this example. (2) Development set up For you local or remote development platform you need the following elements: an editor of your choice e.g. Visual Studio Code, Atom, Sublime, etc. a running node.js installation Node.js, version 10 is supported from 10.15.3 and higher Node.js, version 12 is supported from 12.13.1 and higher npm tool version 6 or higher (3) General steps The general steps to develop a Node.js application for a fabric network can be summarized as: Create your project set up. Get your application client identity from the organization CA. receive an admin itentify from the CA to register an application client user receive an application client user from the CA Create a connection profile of the network. This is an important part we will focus later. Develop a Node.js application e.g. an REST API Service with express.js to build a bridge between the blockchain network and the frontend application. Develop a frontend application for your end users. For example with Angular or a framework of your choice. In our case we are going to use some mocha tests to interact with the REST API. (3.1) Project set up We create a folder where your project lives and switch into that. mkdir mars-client-app cd mars-client-app We create a npm project like in every Node.js project. npm init A package.json file is created and we are good to go. As a next step we can install needed npm packages. Attention only by fabric related packages we should use a particular node_module version. This is because we are running a fabric 1.4.6 network and for that reason we should use the corresponding node_module versions. # packages for the application npm install express --save npm install fabric-ca-client@1.4.8 --save npm install fabric-network@1.4.8 --save # packages for testing the REST API npm install mocha --save-dev npm install supertest --save-dev For a better development workflow we use nodemon to restart the application if we make changes to the source-code. npm install nodemon -g With these steps you project set up is ready and you have all neccessary packages installed. (3.2) Get your application client identity As we have mentioned earlier to get a valid application client identity we have to process two steps. First enroll an admin identity from your organization CA and second register (enroll) a new application itentity. If you register a new client, the enrollment process is included in that step. (3.2.2) Enroll the application user To interact with the blockchain network, we have to register and enroll an application user. The script below register the user user1 and enroll his identity to out local wallet. To enroll the application user the following approch is used. First we define some enviroment vars. cd ca-mars.morgen.net export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem We register the new user. fabric-ca-client register -d --id.name user4-mars.morgen.net --id.secret marsUserPW --id.type client -u https://0.0.0.0:7054 We enroll the Node.js Application from ca-mars.morgen.net. export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./users/user1-mars.morgen.net/ export FABRIC_CA_CLIENT_TLS_CERTFILES=../../ca/client/admin/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://user1-mars.morgen.net:marsUserPW@ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' Add the new user to the wallet # switch into the projectfolder cd mars-client-app # modify the add file addToWallet.js # call the script node addtoWallet.js User user4-mars.morgen.net successfully adding to wallet. (3.2.3) Modify the application users affiliation setting In case the user has wrong affiliation settings, because of the reason that the chaincode uses Attribute-Based Access Control (ABAC) to protect to ledger, we can modify the client identitity to fit this need. To do this we can follow this steps: delete users crypto directory under the users directory and into the wallet directory as well modify the affiliation of the user enroll the user again add the user to the application wallet again (3.2.3.1) Delete existing crypto material for the user # we switch into the organization folder cd ca-mars.morgen.net # delete the user crypto material rm -R users/user4-mars.morgen.net # delete the wallet data for the user rm -R ../app/wallet/user4-mars.morgen.net (3.2.3.1) Modify the affiliation of the user To access the CA we need some enviroment vars. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=tls-ca-cert.pem We can display the current affiliation setting with the following command. # check certs openssl x509 -noout -text -in ./users/user4-mars.morgen.net/msp/signcerts/cert.pem According to our chaincode sacc-abac to have write privileges we have to member of org1.departement1. We can modify the client identity with the following command. fabric-ca-client identity modify user4-mars.morgen.net --affiliation org1.department1 (3.2.3.2) Enroll the user again fabric-ca-client enroll -d -u https://user4-mars.morgen.net:marsUserPW@0.0.0.0:7054 # check certs openssl x509 -noout -text -in ./users/user4-mars.morgen.net/msp/signcerts/cert.pem (3.2.3.3) Add the user to the wallet Modify the addToWallet.js script in terms of the two vars user and pkFileName. # modify this variables let user = 'user4-mars.morgen.net' let pkFileName = 'the_new_pk_sk'; Finally call the script again. node ../app/addtoWallet.js (3.3) Create REST API For our REST API we create the following file structure: . \u251c\u2500\u2500 addtoWallet.js \u251c\u2500\u2500 connection-mars.morgen.net.json \u251c\u2500\u2500 index-query.js \u251c\u2500\u2500 index-set.js \u251c\u2500\u2500 index.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u2514\u2500\u2500 wallet","title":"How to use the Hyperledger Fabric Node SDK"},{"location":"developer/nodeSdk/#how-to-use-the-hyperledger-fabric-node-sdk","text":"To explain how you can use the Hyperledger Fabric Node SDK we can study the following picture to get an conceptual overview. In the picture below you can see the general building blocks of a web application which is interacting with a fabric network.","title":"How to use the Hyperledger Fabric Node SDK"},{"location":"developer/nodeSdk/#1-general-requirements","text":"For this example, we assume the following general requirements: a running Hyperledger Fabric network, version 1.4.6 installed and instantiated chaincode The set up of a fabric network and the installation of chaincode is out of the scope of this example.","title":"(1) General requirements"},{"location":"developer/nodeSdk/#2-development-set-up","text":"For you local or remote development platform you need the following elements: an editor of your choice e.g. Visual Studio Code, Atom, Sublime, etc. a running node.js installation Node.js, version 10 is supported from 10.15.3 and higher Node.js, version 12 is supported from 12.13.1 and higher npm tool version 6 or higher","title":"(2) Development set up"},{"location":"developer/nodeSdk/#3-general-steps","text":"The general steps to develop a Node.js application for a fabric network can be summarized as: Create your project set up. Get your application client identity from the organization CA. receive an admin itentify from the CA to register an application client user receive an application client user from the CA Create a connection profile of the network. This is an important part we will focus later. Develop a Node.js application e.g. an REST API Service with express.js to build a bridge between the blockchain network and the frontend application. Develop a frontend application for your end users. For example with Angular or a framework of your choice. In our case we are going to use some mocha tests to interact with the REST API.","title":"(3) General steps"},{"location":"developer/nodeSdk/#31-project-set-up","text":"We create a folder where your project lives and switch into that. mkdir mars-client-app cd mars-client-app We create a npm project like in every Node.js project. npm init A package.json file is created and we are good to go. As a next step we can install needed npm packages. Attention only by fabric related packages we should use a particular node_module version. This is because we are running a fabric 1.4.6 network and for that reason we should use the corresponding node_module versions. # packages for the application npm install express --save npm install fabric-ca-client@1.4.8 --save npm install fabric-network@1.4.8 --save # packages for testing the REST API npm install mocha --save-dev npm install supertest --save-dev For a better development workflow we use nodemon to restart the application if we make changes to the source-code. npm install nodemon -g With these steps you project set up is ready and you have all neccessary packages installed.","title":"(3.1) Project set up"},{"location":"developer/nodeSdk/#32-get-your-application-client-identity","text":"As we have mentioned earlier to get a valid application client identity we have to process two steps. First enroll an admin identity from your organization CA and second register (enroll) a new application itentity. If you register a new client, the enrollment process is included in that step.","title":"(3.2) Get your application client identity"},{"location":"developer/nodeSdk/#322-enroll-the-application-user","text":"To interact with the blockchain network, we have to register and enroll an application user. The script below register the user user1 and enroll his identity to out local wallet. To enroll the application user the following approch is used. First we define some enviroment vars. cd ca-mars.morgen.net export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=ca-tls.morgen.net.cert.pem We register the new user. fabric-ca-client register -d --id.name user4-mars.morgen.net --id.secret marsUserPW --id.type client -u https://0.0.0.0:7054 We enroll the Node.js Application from ca-mars.morgen.net. export FABRIC_CA_CLIENT_MSPDIR=msp export FABRIC_CA_CLIENT_HOME=./users/user1-mars.morgen.net/ export FABRIC_CA_CLIENT_TLS_CERTFILES=../../ca/client/admin/ca-tls.morgen.net.cert.pem fabric-ca-client enroll -d -u https://user1-mars.morgen.net:marsUserPW@ca-mars.morgen.net:7054 --csr.hosts '*.mars.morgen.net' Add the new user to the wallet # switch into the projectfolder cd mars-client-app # modify the add file addToWallet.js # call the script node addtoWallet.js User user4-mars.morgen.net successfully adding to wallet.","title":"(3.2.2) Enroll the application user"},{"location":"developer/nodeSdk/#323-modify-the-application-users-affiliation-setting","text":"In case the user has wrong affiliation settings, because of the reason that the chaincode uses Attribute-Based Access Control (ABAC) to protect to ledger, we can modify the client identitity to fit this need. To do this we can follow this steps: delete users crypto directory under the users directory and into the wallet directory as well modify the affiliation of the user enroll the user again add the user to the application wallet again","title":"(3.2.3) Modify the application users affiliation setting"},{"location":"developer/nodeSdk/#3231-delete-existing-crypto-material-for-the-user","text":"# we switch into the organization folder cd ca-mars.morgen.net # delete the user crypto material rm -R users/user4-mars.morgen.net # delete the wallet data for the user rm -R ../app/wallet/user4-mars.morgen.net","title":"(3.2.3.1) Delete existing crypto material for the user"},{"location":"developer/nodeSdk/#3231-modify-the-affiliation-of-the-user","text":"To access the CA we need some enviroment vars. export FABRIC_CA_CLIENT_HOME=./ca/client/admin export FABRIC_CA_CLIENT_TLS_CERTFILES=tls-ca-cert.pem We can display the current affiliation setting with the following command. # check certs openssl x509 -noout -text -in ./users/user4-mars.morgen.net/msp/signcerts/cert.pem According to our chaincode sacc-abac to have write privileges we have to member of org1.departement1. We can modify the client identity with the following command. fabric-ca-client identity modify user4-mars.morgen.net --affiliation org1.department1","title":"(3.2.3.1) Modify the affiliation of the user"},{"location":"developer/nodeSdk/#3232-enroll-the-user-again","text":"fabric-ca-client enroll -d -u https://user4-mars.morgen.net:marsUserPW@0.0.0.0:7054 # check certs openssl x509 -noout -text -in ./users/user4-mars.morgen.net/msp/signcerts/cert.pem","title":"(3.2.3.2) Enroll the user again"},{"location":"developer/nodeSdk/#3233-add-the-user-to-the-wallet","text":"Modify the addToWallet.js script in terms of the two vars user and pkFileName. # modify this variables let user = 'user4-mars.morgen.net' let pkFileName = 'the_new_pk_sk'; Finally call the script again. node ../app/addtoWallet.js","title":"(3.2.3.3) Add the user to the wallet"},{"location":"developer/nodeSdk/#33-create-rest-api","text":"For our REST API we create the following file structure: . \u251c\u2500\u2500 addtoWallet.js \u251c\u2500\u2500 connection-mars.morgen.net.json \u251c\u2500\u2500 index-query.js \u251c\u2500\u2500 index-set.js \u251c\u2500\u2500 index.js \u251c\u2500\u2500 node_modules \u251c\u2500\u2500 package-lock.json \u251c\u2500\u2500 package.json \u2514\u2500\u2500 wallet","title":"(3.3) Create REST API"}]}